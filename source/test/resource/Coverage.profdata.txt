/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/System/Library/Frameworks/Foundation.framework/Headers/NSException.h:
       |    1|/*	NSException.h
       |    2|	Copyright (c) 1994-2015, Apple Inc. All rights reserved.
       |    3|*/
       |    4|
       |    5|#import <Foundation/NSObject.h>
       |    6|#import <Foundation/NSString.h>
       |    7|#import <stdarg.h>
       |    8|#import <setjmp.h>
       |    9|
       |   10|@class NSString, NSDictionary, NSArray<ObjectType>, NSNumber;
       |   11|
       |   12|NS_ASSUME_NONNULL_BEGIN
       |   13|
       |   14|/***************	Generic Exception names		***************/
       |   15|
       |   16|FOUNDATION_EXPORT NSString * const NSGenericException;
       |   17|FOUNDATION_EXPORT NSString * const NSRangeException;
       |   18|FOUNDATION_EXPORT NSString * const NSInvalidArgumentException;
       |   19|FOUNDATION_EXPORT NSString * const NSInternalInconsistencyException;
       |   20|
       |   21|FOUNDATION_EXPORT NSString * const NSMallocException;
       |   22|
       |   23|FOUNDATION_EXPORT NSString * const NSObjectInaccessibleException;
       |   24|FOUNDATION_EXPORT NSString * const NSObjectNotAvailableException;
       |   25|FOUNDATION_EXPORT NSString * const NSDestinationInvalidException;
       |   26|    
       |   27|FOUNDATION_EXPORT NSString * const NSPortTimeoutException;
       |   28|FOUNDATION_EXPORT NSString * const NSInvalidSendPortException;
       |   29|FOUNDATION_EXPORT NSString * const NSInvalidReceivePortException;
       |   30|FOUNDATION_EXPORT NSString * const NSPortSendException;
       |   31|FOUNDATION_EXPORT NSString * const NSPortReceiveException;
       |   32|
       |   33|FOUNDATION_EXPORT NSString * const NSOldStyleException;
       |   34|
       |   35|/***************	Exception object	***************/
       |   36|
       |   37|#if __OBJC2__
       |   38|__attribute__((__objc_exception__))
       |   39|#endif
       |   40|@interface NSException : NSObject <NSCopying, NSCoding> {
       |   41|    @private
       |   42|    NSString		*name;
       |   43|    NSString		*reason;
       |   44|    NSDictionary	*userInfo;
       |   45|    id			reserved;
       |   46|}
       |   47|
       |   48|+ (NSException *)exceptionWithName:(NSString *)name reason:(nullable NSString *)reason userInfo:(nullable NSDictionary *)userInfo;
       |   49|- (instancetype)initWithName:(NSString *)aName reason:(nullable NSString *)aReason userInfo:(nullable NSDictionary *)aUserInfo NS_DESIGNATED_INITIALIZER;
       |   50|
       |   51|@property (readonly, copy) NSString *name;
       |   52|@property (nullable, readonly, copy) NSString *reason;
       |   53|@property (nullable, readonly, copy) NSDictionary *userInfo;
       |   54|
       |   55|@property (readonly, copy) NSArray<NSNumber *> *callStackReturnAddresses NS_AVAILABLE(10_5, 2_0);
       |   56|@property (readonly, copy) NSArray<NSString *> *callStackSymbols NS_AVAILABLE(10_6, 4_0);
       |   57|
       |   58|- (void)raise;
       |   59|
       |   60|@end
       |   61|
       |   62|@interface NSException (NSExceptionRaisingConveniences)
       |   63|
       |   64|+ (void)raise:(NSString *)name format:(NSString *)format, ... NS_FORMAT_FUNCTION(2,3);
       |   65|+ (void)raise:(NSString *)name format:(NSString *)format arguments:(va_list)argList NS_FORMAT_FUNCTION(2,0);
       |   66|
       |   67|@end
       |   68|
       |   69|
       |   70|#define NS_DURING		@try {
       |   71|#define NS_HANDLER		} @catch (NSException *localException) {
       |   72|#define NS_ENDHANDLER		}
       |   73|#define NS_VALUERETURN(v,t)	return (v)
       |   74|#define NS_VOIDRETURN		return
       |   75|
       |   76|
       |   77|typedef void NSUncaughtExceptionHandler(NSException *exception);
       |   78|
       |   79|FOUNDATION_EXPORT NSUncaughtExceptionHandler * __nullable NSGetUncaughtExceptionHandler(void);
       |   80|FOUNDATION_EXPORT void NSSetUncaughtExceptionHandler(NSUncaughtExceptionHandler * __nullable);
       |   81|
       |   82|
       |   83|#if __clang__
       |   84|#define __PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |   85|    _Pragma("clang diagnostic push") \
       |   86|    _Pragma("clang diagnostic ignored \"-Wformat-extra-args\"")
       |   87|
       |   88|#define __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS _Pragma("clang diagnostic pop")
       |   89|#else
       |   90|#define __PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS
       |   91|#define __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |   92|#endif
       |   93|
       |   94|@class NSAssertionHandler;
       |   95|
       |   96|#if (defined(__STDC_VERSION__) && (199901L <= __STDC_VERSION__)) || (defined(__cplusplus) && (201103L <= __cplusplus))
       |   97|
       |   98|#if !defined(NS_BLOCK_ASSERTIONS)
       |   99|
       |  100|#if !defined(_NSAssertBody)
       |  101|#define NSAssert(condition, desc, ...)	\
      0|  102|    do {				\
      0|  103|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
      0|  104|	if (!(condition)) {		\
      0|  105|            NSString *__assert_file__ = [NSString stringWithUTF8String:__FILE__]; \
      0|  106|            __assert_file__ = __assert_file__ ? __assert_file__ : @"<Unknown File>"; \
      0|  107|	    [[NSAssertionHandler currentHandler] handleFailureInMethod:_cmd \
      0|  108|		object:self file:__assert_file__ \
      0|  109|	    	lineNumber:__LINE__ description:(desc), ##__VA_ARGS__]; \
      0|  110|	}				\
      0|  111|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS \
      0|  112|    } while(0)
       |  113|#endif
       |  114|
       |  115|#if !defined(_NSCAssertBody)
       |  116|#define NSCAssert(condition, desc, ...) \
       |  117|    do {				\
       |  118|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  119|	if (!(condition)) {		\
       |  120|            NSString *__assert_fn__ = [NSString stringWithUTF8String:__PRETTY_FUNCTION__]; \
       |  121|            __assert_fn__ = __assert_fn__ ? __assert_fn__ : @"<Unknown Function>"; \
       |  122|            NSString *__assert_file__ = [NSString stringWithUTF8String:__FILE__]; \
       |  123|            __assert_file__ = __assert_file__ ? __assert_file__ : @"<Unknown File>"; \
       |  124|	    [[NSAssertionHandler currentHandler] handleFailureInFunction:__assert_fn__ \
       |  125|		file:__assert_file__ \
       |  126|	    	lineNumber:__LINE__ description:(desc), ##__VA_ARGS__]; \
       |  127|	}				\
       |  128|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS \
       |  129|    } while(0)
       |  130|#endif
       |  131|
       |  132|#else // NS_BLOCK_ASSERTIONS defined
       |  133|
       |  134|#if !defined(_NSAssertBody)
       |  135|#define NSAssert(condition, desc, ...) do {} while (0)
       |  136|#endif
       |  137|
       |  138|#if !defined(_NSCAssertBody)
       |  139|#define NSCAssert(condition, desc, ...) do {} while (0)
       |  140|#endif
       |  141|
       |  142|#endif
       |  143|
       |  144|#if !defined(_NSAssertBody)
       |  145|#define NSAssert1(condition, desc, arg1) NSAssert((condition), (desc), (arg1))
       |  146|#define NSAssert2(condition, desc, arg1, arg2) NSAssert((condition), (desc), (arg1), (arg2))
       |  147|#define NSAssert3(condition, desc, arg1, arg2, arg3) NSAssert((condition), (desc), (arg1), (arg2), (arg3))
       |  148|#define NSAssert4(condition, desc, arg1, arg2, arg3, arg4) NSAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4))
       |  149|#define NSAssert5(condition, desc, arg1, arg2, arg3, arg4, arg5) NSAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4), (arg5))
       |  150|#define NSParameterAssert(condition) NSAssert((condition), @"Invalid parameter not satisfying: %@", @#condition)
       |  151|#endif
       |  152|
       |  153|#if !defined(_NSCAssertBody)
       |  154|#define NSCAssert1(condition, desc, arg1) NSCAssert((condition), (desc), (arg1))
       |  155|#define NSCAssert2(condition, desc, arg1, arg2) NSCAssert((condition), (desc), (arg1), (arg2))
       |  156|#define NSCAssert3(condition, desc, arg1, arg2, arg3) NSCAssert((condition), (desc), (arg1), (arg2), (arg3))
       |  157|#define NSCAssert4(condition, desc, arg1, arg2, arg3, arg4) NSCAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4))
       |  158|#define NSCAssert5(condition, desc, arg1, arg2, arg3, arg4, arg5) NSCAssert((condition), (desc), (arg1), (arg2), (arg3), (arg4), (arg5))
       |  159|#define NSCParameterAssert(condition) NSCAssert((condition), @"Invalid parameter not satisfying: %@", @#condition)
       |  160|#endif
       |  161|
       |  162|#endif
       |  163|
       |  164|
       |  165|/* Non-vararg implementation of asserts (ignore) */
       |  166|#if !defined(NS_BLOCK_ASSERTIONS)
       |  167|#if !defined(_NSAssertBody)
       |  168|#define _NSAssertBody(condition, desc, arg1, arg2, arg3, arg4, arg5)	\
       |  169|    do {						\
       |  170|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  171|	if (!(condition)) {				\
       |  172|            NSString *__assert_file__ = [NSString stringWithUTF8String:__FILE__]; \
       |  173|            __assert_file__ = __assert_file__ ? __assert_file__ : @"<Unknown File>"; \
       |  174|	    [[NSAssertionHandler currentHandler] handleFailureInMethod:_cmd object:self file:__assert_file__ \
       |  175|	    	lineNumber:__LINE__ description:(desc), (arg1), (arg2), (arg3), (arg4), (arg5)];	\
       |  176|	}						\
       |  177|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS \
       |  178|    } while(0)
       |  179|#endif
       |  180|#if !defined(_NSCAssertBody)
       |  181|#define _NSCAssertBody(condition, desc, arg1, arg2, arg3, arg4, arg5)	\
       |  182|    do {						\
       |  183|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  184|	if (!(condition)) {				\
       |  185|            NSString *__assert_fn__ = [NSString stringWithUTF8String:__PRETTY_FUNCTION__]; \
       |  186|            __assert_fn__ = __assert_fn__ ? __assert_fn__ : @"<Unknown Function>"; \
       |  187|            NSString *__assert_file__ = [NSString stringWithUTF8String:__FILE__]; \
       |  188|            __assert_file__ = __assert_file__ ? __assert_file__ : @"<Unknown File>"; \
       |  189|	    [[NSAssertionHandler currentHandler] handleFailureInFunction:__assert_fn__ file:__assert_file__ \
       |  190|	    	lineNumber:__LINE__ description:(desc), (arg1), (arg2), (arg3), (arg4), (arg5)];	\
       |  191|	}						\
       |  192|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS \
       |  193|    } while(0)
       |  194|#endif
       |  195|#else
       |  196|#if !defined(_NSAssertBody)
       |  197|#define _NSAssertBody(condition, desc, arg1, arg2, arg3, arg4, arg5)
       |  198|#endif
       |  199|#if !defined(_NSCAssertBody)
       |  200|#define _NSCAssertBody(condition, desc, arg1, arg2, arg3, arg4, arg5)
       |  201|#endif
       |  202|#endif
       |  203|
       |  204|
       |  205|/*
       |  206| * Asserts to use in Objective-C method bodies
       |  207| */
       |  208| 
       |  209|#if !defined(NSAssert)
       |  210|#define NSAssert5(condition, desc, arg1, arg2, arg3, arg4, arg5)	\
       |  211|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  212|    _NSAssertBody((condition), (desc), (arg1), (arg2), (arg3), (arg4), (arg5)) \
       |  213|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  214|
       |  215|#define NSAssert4(condition, desc, arg1, arg2, arg3, arg4)	\
       |  216|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  217|    _NSAssertBody((condition), (desc), (arg1), (arg2), (arg3), (arg4), 0) \
       |  218|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  219|
       |  220|#define NSAssert3(condition, desc, arg1, arg2, arg3)	\
       |  221|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  222|    _NSAssertBody((condition), (desc), (arg1), (arg2), (arg3), 0, 0) \
       |  223|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  224|
       |  225|#define NSAssert2(condition, desc, arg1, arg2)		\
       |  226|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  227|    _NSAssertBody((condition), (desc), (arg1), (arg2), 0, 0, 0) \
       |  228|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  229|
       |  230|#define NSAssert1(condition, desc, arg1)		\
       |  231|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  232|    _NSAssertBody((condition), (desc), (arg1), 0, 0, 0, 0) \
       |  233|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  234|
       |  235|#define NSAssert(condition, desc)			\
       |  236|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  237|    _NSAssertBody((condition), (desc), 0, 0, 0, 0, 0) \
       |  238|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  239|#endif
       |  240|
       |  241|#if !defined(NSParameterAssert)
       |  242|#define NSParameterAssert(condition)			\
       |  243|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  244|    _NSAssertBody((condition), @"Invalid parameter not satisfying: %s", #condition, 0, 0, 0, 0) \
       |  245|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  246|#endif
       |  247|
       |  248|
       |  249|#if !defined(NSCAssert)
       |  250|#define NSCAssert5(condition, desc, arg1, arg2, arg3, arg4, arg5)	\
       |  251|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  252|    _NSCAssertBody((condition), (desc), (arg1), (arg2), (arg3), (arg4), (arg5)) \
       |  253|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  254|
       |  255|#define NSCAssert4(condition, desc, arg1, arg2, arg3, arg4)	\
       |  256|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  257|    _NSCAssertBody((condition), (desc), (arg1), (arg2), (arg3), (arg4), 0) \
       |  258|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  259|
       |  260|#define NSCAssert3(condition, desc, arg1, arg2, arg3)	\
       |  261|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  262|    _NSCAssertBody((condition), (desc), (arg1), (arg2), (arg3), 0, 0) \
       |  263|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  264|
       |  265|#define NSCAssert2(condition, desc, arg1, arg2)	\
       |  266|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  267|    _NSCAssertBody((condition), (desc), (arg1), (arg2), 0, 0, 0) \
       |  268|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  269|
       |  270|#define NSCAssert1(condition, desc, arg1)		\
       |  271|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  272|    _NSCAssertBody((condition), (desc), (arg1), 0, 0, 0, 0) \
       |  273|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  274|
       |  275|#define NSCAssert(condition, desc)			\
       |  276|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  277|    _NSCAssertBody((condition), (desc), 0, 0, 0, 0, 0) \
       |  278|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  279|#endif
       |  280|
       |  281|#if !defined(NSCParameterAssert)
       |  282|#define NSCParameterAssert(condition)			\
       |  283|	__PRAGMA_PUSH_NO_EXTRA_ARG_WARNINGS \
       |  284|    _NSCAssertBody((condition), @"Invalid parameter not satisfying: %s", #condition, 0, 0, 0, 0) \
       |  285|        __PRAGMA_POP_NO_EXTRA_ARG_WARNINGS
       |  286|#endif
       |  287|
       |  288|
       |  289|FOUNDATION_EXPORT NSString * const NSAssertionHandlerKey NS_AVAILABLE(10_6, 4_0);
       |  290|
       |  291|@interface NSAssertionHandler : NSObject {
       |  292|    @private
       |  293|    void *_reserved;
       |  294|}
       |  295|
       |  296|+ (NSAssertionHandler *)currentHandler;
       |  297|
       |  298|- (void)handleFailureInMethod:(SEL)selector object:(id)object file:(NSString *)fileName lineNumber:(NSInteger)line description:(nullable NSString *)format,... NS_FORMAT_FUNCTION(5,6);
       |  299|
       |  300|- (void)handleFailureInFunction:(NSString *)functionName file:(NSString *)fileName lineNumber:(NSInteger)line description:(nullable NSString *)format,... NS_FORMAT_FUNCTION(4,5);
       |  301|
       |  302|@end
       |  303|
       |  304|NS_ASSUME_NONNULL_END

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/System/Library/Frameworks/Foundation.framework/Headers/NSObjCRuntime.h:
       |    1|/*	NSObjCRuntime.h
       |    2|	Copyright (c) 1994-2015, Apple Inc. All rights reserved.
       |    3|*/
       |    4|
       |    5|#include <TargetConditionals.h>
       |    6|#include <Availability.h>
       |    7|
       |    8|#if (TARGET_OS_MAC && !(TARGET_OS_EMBEDDED || TARGET_OS_IPHONE)) || (TARGET_OS_EMBEDDED || TARGET_OS_IPHONE)
       |    9|#include <objc/NSObjCRuntime.h>
       |   10|#include <stdarg.h>
       |   11|#include <stdint.h>
       |   12|#include <limits.h>
       |   13|#include <AvailabilityMacros.h>
       |   14|#endif
       |   15|
       |   16|#if defined(__cplusplus)
       |   17|#define FOUNDATION_EXTERN extern "C"
       |   18|#else
       |   19|#define FOUNDATION_EXTERN extern
       |   20|#endif
       |   21|
       |   22|#if TARGET_OS_WIN32
       |   23|
       |   24|    #if defined(NSBUILDINGFOUNDATION)
       |   25|        #define FOUNDATION_EXPORT FOUNDATION_EXTERN __declspec(dllexport)
       |   26|    #else
       |   27|        #define FOUNDATION_EXPORT FOUNDATION_EXTERN __declspec(dllimport)
       |   28|    #endif
       |   29|
       |   30|    #define FOUNDATION_IMPORT FOUNDATION_EXTERN __declspec(dllimport)
       |   31|
       |   32|#else
       |   33|    #define FOUNDATION_EXPORT  FOUNDATION_EXTERN
       |   34|    #define FOUNDATION_IMPORT FOUNDATION_EXTERN
       |   35|#endif
       |   36|
       |   37|#if !defined(NS_INLINE)
       |   38|    #if defined(__GNUC__)
       |   39|        #define NS_INLINE static __inline__ __attribute__((always_inline))
       |   40|    #elif defined(__MWERKS__) || defined(__cplusplus)
       |   41|        #define NS_INLINE static inline
       |   42|    #elif defined(_MSC_VER)
       |   43|        #define NS_INLINE static __inline
       |   44|    #elif TARGET_OS_WIN32
       |   45|        #define NS_INLINE static __inline__
       |   46|    #endif
       |   47|#endif
       |   48|
       |   49|#if !defined(FOUNDATION_STATIC_INLINE)
       |   50|#define FOUNDATION_STATIC_INLINE static __inline__
       |   51|#endif
       |   52|
       |   53|#if !defined(FOUNDATION_EXTERN_INLINE)
       |   54|#define FOUNDATION_EXTERN_INLINE extern __inline__
       |   55|#endif
       |   56|
       |   57|#if !defined(NS_REQUIRES_NIL_TERMINATION)
       |   58|    #if TARGET_OS_WIN32
       |   59|        #define NS_REQUIRES_NIL_TERMINATION
       |   60|    #else
       |   61|        #if defined(__APPLE_CC__) && (__APPLE_CC__ >= 5549)
       |   62|            #define NS_REQUIRES_NIL_TERMINATION __attribute__((sentinel(0,1)))
       |   63|        #else
       |   64|            #define NS_REQUIRES_NIL_TERMINATION __attribute__((sentinel))
       |   65|        #endif
       |   66|    #endif
       |   67|#endif
       |   68|
       |   69|#if !defined(NS_BLOCKS_AVAILABLE)
       |   70|    #if __BLOCKS__ && (MAC_OS_X_VERSION_10_6 <= MAC_OS_X_VERSION_MAX_ALLOWED || __IPHONE_4_0 <= __IPHONE_OS_VERSION_MAX_ALLOWED)
       |   71|        #define NS_BLOCKS_AVAILABLE 1
       |   72|    #else
       |   73|        #define NS_BLOCKS_AVAILABLE 0
       |   74|    #endif
       |   75|#endif
       |   76|
       |   77|// Marks APIs whose iOS versions are nonatomic, that is cannot be set/get from multiple threads safely without additional synchronization
       |   78|#if !defined(NS_NONATOMIC_IOSONLY)
       |   79|    #if TARGET_OS_IPHONE
       |   80|	#define NS_NONATOMIC_IOSONLY nonatomic
       |   81|    #else
       |   82|        #if __has_feature(objc_property_explicit_atomic)
       |   83|            #define NS_NONATOMIC_IOSONLY atomic
       |   84|        #else
       |   85|            #define NS_NONATOMIC_IOSONLY
       |   86|        #endif
       |   87|    #endif
       |   88|#endif
       |   89|
       |   90|// Use NS_NONATOMIC_IOSONLY instead of this older macro
       |   91|#if !defined(NS_NONATOMIC_IPHONEONLY)
       |   92|#define NS_NONATOMIC_IPHONEONLY NS_NONATOMIC_IOSONLY
       |   93|#endif
       |   94|
       |   95|// Marks APIs which format strings by taking a format string and optional varargs as arguments
       |   96|#if !defined(NS_FORMAT_FUNCTION)
       |   97|    #if (__GNUC__*10+__GNUC_MINOR__ >= 42) && (TARGET_OS_MAC || TARGET_OS_EMBEDDED)
       |   98|	#define NS_FORMAT_FUNCTION(F,A) __attribute__((format(__NSString__, F, A)))
       |   99|    #else
       |  100|	#define NS_FORMAT_FUNCTION(F,A)
       |  101|    #endif
       |  102|#endif
       |  103|
       |  104|// Marks APIs which are often used to process (take and return) format strings, so they can be used in place of a constant format string parameter in APIs
       |  105|#if !defined(NS_FORMAT_ARGUMENT)
       |  106|    #if defined(__clang__)
       |  107|	#define NS_FORMAT_ARGUMENT(A) __attribute__ ((format_arg(A)))
       |  108|    #else
       |  109|	#define NS_FORMAT_ARGUMENT(A)
       |  110|    #endif
       |  111|#endif
       |  112|
       |  113|// Some compilers provide the capability to test if certain features are available. This macro provides a compatibility path for other compilers.
       |  114|#ifndef __has_feature
       |  115|#define __has_feature(x) 0
       |  116|#endif
       |  117|
       |  118|#ifndef __has_extension
       |  119|#define __has_extension(x) 0
       |  120|#endif
       |  121|
       |  122|// Some compilers provide the capability to test if certain attributes are available. This macro provides a compatibility path for other compilers.
       |  123|#ifndef __has_attribute
       |  124|#define __has_attribute(x) 0
       |  125|#endif
       |  126|
       |  127|// Marks methods and functions which return an object that needs to be released by the caller but whose names are not consistent with Cocoa naming rules. The recommended fix to this is to rename the methods or functions, but this macro can be used to let the clang static analyzer know of any exceptions that cannot be fixed.
       |  128|// This macro is ONLY to be used in exceptional circumstances, not to annotate functions which conform to the Cocoa naming rules.
       |  129|#if __has_feature(attribute_ns_returns_retained)
       |  130|#define NS_RETURNS_RETAINED __attribute__((ns_returns_retained))
       |  131|#else
       |  132|#define NS_RETURNS_RETAINED
       |  133|#endif
       |  134|
       |  135|// Marks methods and functions which return an object that may need to be retained by the caller but whose names are not consistent with Cocoa naming rules. The recommended fix to this is to rename the methods or functions, but this macro can be used to let the clang static analyzer know of any exceptions that cannot be fixed.
       |  136|// This macro is ONLY to be used in exceptional circumstances, not to annotate functions which conform to the Cocoa naming rules.
       |  137|#if __has_feature(attribute_ns_returns_not_retained)
       |  138|#define NS_RETURNS_NOT_RETAINED __attribute__((ns_returns_not_retained))
       |  139|#else
       |  140|#define NS_RETURNS_NOT_RETAINED
       |  141|#endif
       |  142|
       |  143|#ifndef NS_RETURNS_INNER_POINTER
       |  144|#if __has_attribute(objc_returns_inner_pointer)
       |  145|#define NS_RETURNS_INNER_POINTER __attribute__((objc_returns_inner_pointer))
       |  146|#else
       |  147|#define NS_RETURNS_INNER_POINTER
       |  148|#endif
       |  149|#endif
       |  150|
       |  151|// Marks methods and functions which cannot be used when compiling in automatic reference counting mode.
       |  152|#if __has_feature(objc_arc)
       |  153|#define NS_AUTOMATED_REFCOUNT_UNAVAILABLE __attribute__((unavailable("not available in automatic reference counting mode")))
       |  154|#else
       |  155|#define NS_AUTOMATED_REFCOUNT_UNAVAILABLE
       |  156|#endif
       |  157|
       |  158|// Marks classes which cannot participate in the ARC weak reference feature.
       |  159|#if __has_attribute(objc_arc_weak_reference_unavailable)
       |  160|#define NS_AUTOMATED_REFCOUNT_WEAK_UNAVAILABLE __attribute__((objc_arc_weak_reference_unavailable))
       |  161|#else
       |  162|#define NS_AUTOMATED_REFCOUNT_WEAK_UNAVAILABLE
       |  163|#endif
       |  164|
       |  165|// Marks classes that must specify @dynamic or @synthesize for properties in their @implementation (property getters & setters will not be synthesized unless the @synthesize directive is used)
       |  166|#if __has_attribute(objc_requires_property_definitions)
       |  167|#define NS_REQUIRES_PROPERTY_DEFINITIONS __attribute__((objc_requires_property_definitions)) 
       |  168|#else
       |  169|#define NS_REQUIRES_PROPERTY_DEFINITIONS
       |  170|#endif
       |  171|
       |  172|// Decorates methods in which the receiver may be replaced with the result of the method. 
       |  173|#if __has_feature(attribute_ns_consumes_self)
       |  174|#define NS_REPLACES_RECEIVER __attribute__((ns_consumes_self)) NS_RETURNS_RETAINED
       |  175|#else
       |  176|#define NS_REPLACES_RECEIVER
       |  177|#endif
       |  178|
       |  179|#if __has_feature(attribute_ns_consumed)
       |  180|#define NS_RELEASES_ARGUMENT __attribute__((ns_consumed))
       |  181|#else
       |  182|#define NS_RELEASES_ARGUMENT
       |  183|#endif
       |  184|
       |  185|// Mark local variables of type 'id' or pointer-to-ObjC-object-type so that values stored into that local variable are not aggressively released by the compiler during optimization, but are held until either the variable is assigned to again, or the end of the scope (such as a compound statement, or method definition) of the local variable.
       |  186|#ifndef NS_VALID_UNTIL_END_OF_SCOPE
       |  187|#if __has_attribute(objc_precise_lifetime)
       |  188|#define NS_VALID_UNTIL_END_OF_SCOPE __attribute__((objc_precise_lifetime))
       |  189|#else
       |  190|#define NS_VALID_UNTIL_END_OF_SCOPE
       |  191|#endif
       |  192|#endif
       |  193|
       |  194|// Annotate classes which are root classes as really being root classes
       |  195|#ifndef NS_ROOT_CLASS
  ------------------
  | -[OBAbstractTableViewController tableView:estimatedHeightForRowAtIndexPath:]:
  |      5|  184|
  |      5|  185|// Mark local variables of type 'id' or pointer-to-ObjC-object-type so that values stored into that local variable are not aggressively released by the compiler during optimization, but are held until either the variable is assigned to again, or the end of the scope (such as a compound statement, or method definition) of the local variable.
  |      0|  186|#ifndef NS_VALID_UNTIL_END_OF_SCOPE
  |      0|  187|#if __has_attribute(objc_precise_lifetime)
  |      0|  188|#define NS_VALID_UNTIL_END_OF_SCOPE __attribute__((objc_precise_lifetime))
  |      0|  189|#else
  |      5|  190|#define NS_VALID_UNTIL_END_OF_SCOPE
  |      5|  191|#endif
  |      5|  192|#endif
  |      5|  193|
  |      0|  194|// Annotate classes which are root classes as really being root classes
  |      5|  195|#ifndef NS_ROOT_CLASS
  ------------------
       |  196|#if __has_attribute(objc_root_class)
       |  197|#define NS_ROOT_CLASS __attribute__((objc_root_class))
       |  198|#else
       |  199|#define NS_ROOT_CLASS
       |  200|#endif
       |  201|#endif
       |  202|
       |  203|#ifndef NS_REQUIRES_SUPER
       |  204|#if __has_attribute(objc_requires_super)
       |  205|#define NS_REQUIRES_SUPER __attribute__((objc_requires_super))
       |  206|#else
       |  207|#define NS_REQUIRES_SUPER
       |  208|#endif
       |  209|#endif
       |  210|
       |  211|#ifndef NS_DESIGNATED_INITIALIZER
  ------------------
  | -[OBAbstractTableViewController tableView:heightForRowAtIndexPath:]:
  |      0|  198|#else
  |      0|  199|#define NS_ROOT_CLASS
  |      0|  200|#endif
  |      0|  201|#endif
  |      0|  202|
  |      0|  203|#ifndef NS_REQUIRES_SUPER
  |      0|  204|#if __has_attribute(objc_requires_super)
  |      0|  205|#define NS_REQUIRES_SUPER __attribute__((objc_requires_super))
  |      0|  206|#else
  |      0|  207|#define NS_REQUIRES_SUPER
  |      0|  208|#endif
  |      0|  209|#endif
  |      0|  210|
  |      0|  211|#ifndef NS_DESIGNATED_INITIALIZER
  ------------------
       |  212|#if __has_attribute(objc_designated_initializer)
       |  213|#define NS_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
       |  214|#else
       |  215|#define NS_DESIGNATED_INITIALIZER
       |  216|#endif
       |  217|#endif
       |  218|
       |  219|#ifndef NS_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION
       |  220|#if __has_attribute(objc_protocol_requires_explicit_implementation)
       |  221|#define NS_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION __attribute__((objc_protocol_requires_explicit_implementation))
       |  222|#else
       |  223|#define NS_PROTOCOL_REQUIRES_EXPLICIT_IMPLEMENTATION
       |  224|#endif
       |  225|#endif
       |  226|
       |  227|#if !__has_feature(objc_instancetype)
       |  228|#undef instancetype
       |  229|#define instancetype id
       |  230|#endif
       |  231|
       |  232|#if !defined(NS_UNAVAILABLE)
       |  233|#define NS_UNAVAILABLE UNAVAILABLE_ATTRIBUTE
       |  234|#endif
       |  235|
       |  236|#if !defined(__unsafe_unretained)
       |  237|#define __unsafe_unretained
       |  238|#endif
       |  239|
       |  240|#if TARGET_OS_WIN32
       |  241|#import <objc/objc.h>
       |  242|#include <stdarg.h>
       |  243|#include <stdint.h>
       |  244|#include <limits.h>
       |  245|#endif
       |  246|
       |  247|#include <CoreFoundation/CFAvailability.h>
       |  248|
       |  249|#define NS_AVAILABLE(_mac, _ios) CF_AVAILABLE(_mac, _ios)
       |  250|#define NS_AVAILABLE_MAC(_mac) CF_AVAILABLE_MAC(_mac)
       |  251|#define NS_AVAILABLE_IOS(_ios) CF_AVAILABLE_IOS(_ios)
       |  252|
       |  253|#define NS_DEPRECATED(_macIntro, _macDep, _iosIntro, _iosDep, ...) CF_DEPRECATED(_macIntro, _macDep, _iosIntro, _iosDep, __VA_ARGS__)
       |  254|#define NS_DEPRECATED_MAC(_macIntro, _macDep, ...) CF_DEPRECATED_MAC(_macIntro, _macDep, __VA_ARGS__)
       |  255|#define NS_DEPRECATED_IOS(_iosIntro, _iosDep, ...) CF_DEPRECATED_IOS(_iosIntro, _iosDep, __VA_ARGS__)
       |  256|
       |  257|#define NS_ENUM_AVAILABLE(_mac, _ios) CF_ENUM_AVAILABLE(_mac, _ios)
       |  258|#define NS_ENUM_AVAILABLE_MAC(_mac) CF_ENUM_AVAILABLE_MAC(_mac)
       |  259|#define NS_ENUM_AVAILABLE_IOS(_ios) CF_ENUM_AVAILABLE_IOS(_ios)
       |  260|
       |  261|#define NS_ENUM_DEPRECATED(_macIntro, _macDep, _iosIntro, _iosDep, ...) CF_ENUM_DEPRECATED(_macIntro, _macDep, _iosIntro, _iosDep, __VA_ARGS__)
       |  262|#define NS_ENUM_DEPRECATED_MAC(_macIntro, _macDep, ...) CF_ENUM_DEPRECATED_MAC(_macIntro, _macDep, __VA_ARGS__)
       |  263|#define NS_ENUM_DEPRECATED_IOS(_iosIntro, _iosDep, ...) CF_ENUM_DEPRECATED_IOS(_iosIntro, _iosDep, __VA_ARGS__)
       |  264|
       |  265|#define NS_AVAILABLE_IPHONE(_ios) CF_AVAILABLE_IOS(_ios)
       |  266|#define NS_DEPRECATED_IPHONE(_iosIntro, _iosDep) CF_DEPRECATED_IOS(_iosIntro, _iosDep)
       |  267|
       |  268|/* NS_ENUM supports the use of one or two arguments. The first argument is always the integer type used for the values of the enum. The second argument is an optional type name for the macro. When specifying a type name, you must precede the macro with 'typedef' like so:
       |  269| 
       |  270|typedef NS_ENUM(NSInteger, NSComparisonResult) {
       |  271|    ...
       |  272|};
       |  273| 
       |  274|If you do not specify a type name, do not use 'typedef'. For example:
       |  275| 
       |  276|NS_ENUM(NSInteger) {
       |  277|    ...
       |  278|};
       |  279|*/
       |  280|#define NS_ENUM(...) CF_ENUM(__VA_ARGS__)
       |  281|#define NS_OPTIONS(_type, _name) CF_OPTIONS(_type, _name)
       |  282|
       |  283|// This macro is to be used by system frameworks to support the weak linking of classes. Weak linking is supported on iOS 3.1 and Mac OS X 10.6.8 or later.
       |  284|#if (__MAC_OS_X_VERSION_MIN_REQUIRED >= __MAC_10_6 || __IPHONE_OS_VERSION_MIN_REQUIRED >= __IPHONE_3_1) && \
       |  285|    ((__has_feature(objc_weak_class) || \
       |  286|     (defined(__llvm__) && defined(__APPLE_CC__) && (__APPLE_CC__ >= 5658)) || \
       |  287|     (defined(__APPLE_CC__) && (__APPLE_CC__ >= 5666))))
       |  288|#define NS_CLASS_AVAILABLE(_mac, _ios) __attribute__((visibility("default"))) NS_AVAILABLE(_mac, _ios)
       |  289|#define NS_CLASS_DEPRECATED(_mac, _macDep, _ios, _iosDep, ...) __attribute__((visibility("default"))) NS_DEPRECATED(_mac, _macDep, _ios, _iosDep, __VA_ARGS__)
       |  290|#else
       |  291|// class weak import is not supported
       |  292|#define NS_CLASS_AVAILABLE(_mac, _ios)
       |  293|#define NS_CLASS_DEPRECATED(_mac, _macDep, _ios, _iosDep, ...)
       |  294|#endif
       |  295|
       |  296|#define NS_CLASS_AVAILABLE_IOS(_ios) NS_CLASS_AVAILABLE(NA, _ios)
       |  297|#define NS_CLASS_AVAILABLE_MAC(_mac) NS_CLASS_AVAILABLE(_mac, NA)
       |  298|#define NS_CLASS_DEPRECATED_MAC(_macIntro, _macDep, ...) NS_CLASS_DEPRECATED(_macIntro, _macDep, NA, NA, __VA_ARGS__)
       |  299|#define NS_CLASS_DEPRECATED_IOS(_iosIntro, _iosDep, ...) NS_CLASS_DEPRECATED(NA, NA, _iosIntro, _iosDep, __VA_ARGS__)
       |  300|
       |  301|#define NS_EXTENSION_UNAVAILABLE(_msg)      __OS_EXTENSION_UNAVAILABLE(_msg)
       |  302|#define NS_EXTENSION_UNAVAILABLE_MAC(_msg)  __OSX_EXTENSION_UNAVAILABLE(_msg)
       |  303|#define NS_EXTENSION_UNAVAILABLE_IOS(_msg)  __IOS_EXTENSION_UNAVAILABLE(_msg)
       |  304|
       |  305|#define NS_SWIFT_UNAVAILABLE(_msg) CF_SWIFT_UNAVAILABLE(_msg)
       |  306|
       |  307|#define NS_ASSUME_NONNULL_BEGIN _Pragma("clang assume_nonnull begin")
       |  308|#define NS_ASSUME_NONNULL_END   _Pragma("clang assume_nonnull end")
       |  309|
       |  310|#define NS_REFINED_FOR_SWIFT CF_REFINED_FOR_SWIFT
       |  311|
       |  312|#define NS_SWIFT_NAME(_name) CF_SWIFT_NAME(_name)
       |  313|
       |  314|#if __has_attribute(swift_error)
       |  315|#define NS_SWIFT_NOTHROW __attribute__((swift_error(none)))
       |  316|#else
       |  317|#define NS_SWIFT_NOTHROW
       |  318|#endif
       |  319|
       |  320|
       |  321|NS_ASSUME_NONNULL_BEGIN
       |  322|
       |  323|FOUNDATION_EXPORT double NSFoundationVersionNumber;
       |  324|
       |  325|#if TARGET_OS_MAC
       |  326|#define NSFoundationVersionNumber10_0	397.40
       |  327|#define NSFoundationVersionNumber10_1	425.00
       |  328|#define NSFoundationVersionNumber10_1_1	425.00
       |  329|#define NSFoundationVersionNumber10_1_2	425.00
       |  330|#define NSFoundationVersionNumber10_1_3	425.00
       |  331|#define NSFoundationVersionNumber10_1_4	425.00
       |  332|#define NSFoundationVersionNumber10_2	462.00
       |  333|#define NSFoundationVersionNumber10_2_1	462.00
       |  334|#define NSFoundationVersionNumber10_2_2	462.00
       |  335|#define NSFoundationVersionNumber10_2_3	462.00
       |  336|#define NSFoundationVersionNumber10_2_4	462.00
       |  337|#define NSFoundationVersionNumber10_2_5	462.00
       |  338|#define NSFoundationVersionNumber10_2_6	462.00
       |  339|#define NSFoundationVersionNumber10_2_7	462.70
       |  340|#define NSFoundationVersionNumber10_2_8	462.70
       |  341|#define NSFoundationVersionNumber10_3	500.00
       |  342|#define NSFoundationVersionNumber10_3_1	500.00
       |  343|#define NSFoundationVersionNumber10_3_2	500.30
       |  344|#define NSFoundationVersionNumber10_3_3	500.54
       |  345|#define NSFoundationVersionNumber10_3_4	500.56
       |  346|#define NSFoundationVersionNumber10_3_5	500.56
       |  347|#define NSFoundationVersionNumber10_3_6	500.56
       |  348|#define NSFoundationVersionNumber10_3_7	500.56
       |  349|#define NSFoundationVersionNumber10_3_8	500.56
       |  350|#define NSFoundationVersionNumber10_3_9	500.58
       |  351|#define NSFoundationVersionNumber10_4	567.00
       |  352|#define NSFoundationVersionNumber10_4_1	567.00
       |  353|#define NSFoundationVersionNumber10_4_2	567.12
       |  354|#define NSFoundationVersionNumber10_4_3	567.21
       |  355|#define NSFoundationVersionNumber10_4_4_Intel	567.23
       |  356|#define NSFoundationVersionNumber10_4_4_PowerPC	567.21
       |  357|#define NSFoundationVersionNumber10_4_5	567.25
       |  358|#define NSFoundationVersionNumber10_4_6	567.26
       |  359|#define NSFoundationVersionNumber10_4_7	567.27
       |  360|#define NSFoundationVersionNumber10_4_8	567.28
       |  361|#define NSFoundationVersionNumber10_4_9	567.29
       |  362|#define NSFoundationVersionNumber10_4_10	567.29
       |  363|#define NSFoundationVersionNumber10_4_11	567.36
       |  364|#define NSFoundationVersionNumber10_5	677.00
       |  365|#define NSFoundationVersionNumber10_5_1	677.10
       |  366|#define NSFoundationVersionNumber10_5_2 677.15
       |  367|#define NSFoundationVersionNumber10_5_3 677.19
       |  368|#define NSFoundationVersionNumber10_5_4 677.19
       |  369|#define NSFoundationVersionNumber10_5_5 677.21
       |  370|#define NSFoundationVersionNumber10_5_6 677.22
       |  371|#define NSFoundationVersionNumber10_5_7 677.24
       |  372|#define NSFoundationVersionNumber10_5_8 677.26
       |  373|#define NSFoundationVersionNumber10_6 751.00
       |  374|#define NSFoundationVersionNumber10_6_1 751.00
       |  375|#define NSFoundationVersionNumber10_6_2 751.14
       |  376|#define NSFoundationVersionNumber10_6_3 751.21
       |  377|#define NSFoundationVersionNumber10_6_4 751.29
       |  378|#define NSFoundationVersionNumber10_6_5 751.42
       |  379|#define NSFoundationVersionNumber10_6_6 751.53
       |  380|#define NSFoundationVersionNumber10_6_7 751.53
       |  381|#define NSFoundationVersionNumber10_6_8 751.62
       |  382|#define NSFoundationVersionNumber10_7 833.10
       |  383|#define NSFoundationVersionNumber10_7_1 833.10
       |  384|#define NSFoundationVersionNumber10_7_2 833.20
       |  385|#define NSFoundationVersionNumber10_7_3 833.24
       |  386|#define NSFoundationVersionNumber10_7_4 833.25
       |  387|#define NSFoundationVersionNumber10_8 945.00
       |  388|#define NSFoundationVersionNumber10_8_1 945.00
       |  389|#define NSFoundationVersionNumber10_8_2 945.11
       |  390|#define NSFoundationVersionNumber10_8_3 945.16
       |  391|#define NSFoundationVersionNumber10_8_4 945.18
       |  392|#define NSFoundationVersionNumber10_9 1056
       |  393|#define NSFoundationVersionNumber10_9_1 1056
       |  394|#define NSFoundationVersionNumber10_9_2 1056.13
       |  395|#define NSFoundationVersionNumber10_10 1151.16
       |  396|#define NSFoundationVersionNumber10_10_1 1151.16
       |  397|#define NSFoundationVersionNumber10_10_2 1152.14
       |  398|#define NSFoundationVersionNumber10_10_3 1153.20
       |  399|#endif
       |  400|
       |  401|#if TARGET_OS_IPHONE
       |  402|#define NSFoundationVersionNumber_iPhoneOS_2_0	678.24
       |  403|#define NSFoundationVersionNumber_iPhoneOS_2_1  678.26
       |  404|#define NSFoundationVersionNumber_iPhoneOS_2_2  678.29
       |  405|#define NSFoundationVersionNumber_iPhoneOS_3_0  678.47
       |  406|#define NSFoundationVersionNumber_iPhoneOS_3_1  678.51
       |  407|#define NSFoundationVersionNumber_iPhoneOS_3_2  678.60
       |  408|#define NSFoundationVersionNumber_iOS_4_0  751.32
       |  409|#define NSFoundationVersionNumber_iOS_4_1  751.37
       |  410|#define NSFoundationVersionNumber_iOS_4_2  751.49
       |  411|#define NSFoundationVersionNumber_iOS_4_3  751.49
       |  412|#define NSFoundationVersionNumber_iOS_5_0  881.00
       |  413|#define NSFoundationVersionNumber_iOS_5_1  890.10
       |  414|#define NSFoundationVersionNumber_iOS_6_0  992.00
     34|  415|#define NSFoundationVersionNumber_iOS_6_1  993.00
       |  416|#define NSFoundationVersionNumber_iOS_7_0 1047.20
      0|  417|#define NSFoundationVersionNumber_iOS_7_1 1047.25
       |  418|#define NSFoundationVersionNumber_iOS_8_0 1140.11
       |  419|#define NSFoundationVersionNumber_iOS_8_1 1141.1
       |  420|#define NSFoundationVersionNumber_iOS_8_2 1142.14
       |  421|#define NSFoundationVersionNumber_iOS_8_3 1144.17
       |  422|#define NSFoundationVersionNumber_iOS_8_4 1144.17
       |  423|#endif
       |  424|
       |  425|#if TARGET_OS_WIN32
       |  426|typedef long NSInteger;
       |  427|typedef unsigned long NSUInteger;
       |  428|
       |  429|#define NSIntegerMax    LONG_MAX
       |  430|#define NSIntegerMin    LONG_MIN
       |  431|#define NSUIntegerMax   ULONG_MAX
       |  432|
       |  433|#define NSINTEGER_DEFINED 1
       |  434|#endif
       |  435|
       |  436|@class NSString, Protocol;
       |  437|
       |  438|FOUNDATION_EXPORT NSString *NSStringFromSelector(SEL aSelector);
       |  439|FOUNDATION_EXPORT SEL NSSelectorFromString(NSString *aSelectorName);
       |  440|
       |  441|FOUNDATION_EXPORT NSString *NSStringFromClass(Class aClass);
       |  442|FOUNDATION_EXPORT Class __nullable NSClassFromString(NSString *aClassName);
       |  443|
       |  444|FOUNDATION_EXPORT NSString *NSStringFromProtocol(Protocol *proto) NS_AVAILABLE(10_5, 2_0);
       |  445|FOUNDATION_EXPORT Protocol * __nullable NSProtocolFromString(NSString *namestr) NS_AVAILABLE(10_5, 2_0);
       |  446|
       |  447|FOUNDATION_EXPORT const char *NSGetSizeAndAlignment(const char *typePtr, NSUInteger * __nullable sizep, NSUInteger * __nullable alignp);
       |  448|
       |  449|FOUNDATION_EXPORT void NSLog(NSString *format, ...) NS_FORMAT_FUNCTION(1,2);
       |  450|FOUNDATION_EXPORT void NSLogv(NSString *format, va_list args) NS_FORMAT_FUNCTION(1,0);
       |  451|
       |  452|typedef NS_ENUM(NSInteger, NSComparisonResult) {NSOrderedAscending = -1L, NSOrderedSame, NSOrderedDescending};
       |  453|
       |  454|#if NS_BLOCKS_AVAILABLE
       |  455|typedef NSComparisonResult (^NSComparator)(id obj1, id obj2);
       |  456|#endif
       |  457|
       |  458|typedef NS_OPTIONS(NSUInteger, NSEnumerationOptions) {
       |  459|    NSEnumerationConcurrent = (1UL << 0),
       |  460|    NSEnumerationReverse = (1UL << 1),
       |  461|};
       |  462|
       |  463|typedef NS_OPTIONS(NSUInteger, NSSortOptions) {
       |  464|    NSSortConcurrent = (1UL << 0),
       |  465|    NSSortStable = (1UL << 4),
       |  466|};
       |  467|
       |  468|/* The following Quality of Service (QoS) classifications are used to indicate to the system the nature and importance of work.  They are used by the system to manage a variety of resources.  Higher QoS classes receive more resources than lower ones during resource contention. */
       |  469|typedef NS_ENUM(NSInteger, NSQualityOfService) {
       |  470|    /* UserInteractive QoS is used for work directly involved in providing an interactive UI such as processing events or drawing to the screen. */
       |  471|    NSQualityOfServiceUserInteractive = 0x21,
       |  472|    
       |  473|    /* UserInitiated QoS is used for performing work that has been explicitly requested by the user and for which results must be immediately presented in order to allow for further user interaction.  For example, loading an email after a user has selected it in a message list. */
       |  474|    NSQualityOfServiceUserInitiated = 0x19,
       |  475|    
       |  476|    /* Utility QoS is used for performing work which the user is unlikely to be immediately waiting for the results.  This work may have been requested by the user or initiated automatically, does not prevent the user from further interaction, often operates at user-visible timescales and may have its progress indicated to the user by a non-modal progress indicator.  This work will run in an energy-efficient manner, in deference to higher QoS work when resources are constrained.  For example, periodic content updates or bulk file operations such as media import. */
       |  477|    NSQualityOfServiceUtility = 0x11,
       |  478|    
       |  479|    /* Background QoS is used for work that is not user initiated or visible.  In general, a user is unaware that this work is even happening and it will run in the most efficient manner while giving the most deference to higher QoS work.  For example, pre-fetching content, search indexing, backups, and syncing of data with external systems. */
       |  480|    NSQualityOfServiceBackground = 0x09,
       |  481|
       |  482|    /* Default QoS indicates the absence of QoS information.  Whenever possible QoS information will be inferred from other sources.  If such inference is not possible, a QoS between UserInitiated and Utility will be used. */
       |  483|    NSQualityOfServiceDefault = -1
       |  484|} NS_ENUM_AVAILABLE(10_10, 8_0);
       |  485|
       |  486|static const NSInteger NSNotFound = NSIntegerMax;
       |  487|
       |  488|NS_ASSUME_NONNULL_END
       |  489|
       |  490|#if !defined(YES)
       |  491|    #define YES	(BOOL)1
       |  492|#endif
       |  493|
       |  494|#if !defined(NO)
       |  495|    #define NO	(BOOL)0
       |  496|#endif
       |  497|
       |  498|#if !defined(NS_SUPPRESS_MIN_MAX_ABS)
       |  499|
       |  500|#if (defined(__GNUC__) || defined(__clang__)) && !defined(__STRICT_ANSI__)
       |  501|
       |  502|#if __clang__
       |  503|
       |  504|#define __NSX_PASTE__(A,B) A##B
       |  505|
       |  506|#if !defined(MIN)
       |  507|    #define __NSMIN_IMPL__(A,B,L) ({ __typeof__(A) __NSX_PASTE__(__a,L) = (A); __typeof__(B) __NSX_PASTE__(__b,L) = (B); (__NSX_PASTE__(__a,L) < __NSX_PASTE__(__b,L)) ? __NSX_PASTE__(__a,L) : __NSX_PASTE__(__b,L); })
       |  508|    #define MIN(A,B) __NSMIN_IMPL__(A,B,__COUNTER__)
       |  509|#endif
       |  510|
       |  511|#if !defined(MAX)
       |  512|    #define __NSMAX_IMPL__(A,B,L) ({ __typeof__(A) __NSX_PASTE__(__a,L) = (A); __typeof__(B) __NSX_PASTE__(__b,L) = (B); (__NSX_PASTE__(__a,L) < __NSX_PASTE__(__b,L)) ? __NSX_PASTE__(__b,L) : __NSX_PASTE__(__a,L); })
       |  513|    #define MAX(A,B) __NSMAX_IMPL__(A,B,__COUNTER__)
       |  514|#endif
       |  515|
       |  516|#if !defined(ABS)
       |  517|    #define __NSABS_IMPL__(A,L) ({ __typeof__(A) __NSX_PASTE__(__a,L) = (A); (__NSX_PASTE__(__a,L) < 0) ? - __NSX_PASTE__(__a,L) : __NSX_PASTE__(__a,L); })
       |  518|    #define ABS(A) __NSABS_IMPL__(A,__COUNTER__)
       |  519|#endif
       |  520|
       |  521|#else
       |  522|
       |  523|#if !defined(MIN)
       |  524|    #define MIN(A,B)	({ __typeof__(A) __a = (A); __typeof__(B) __b = (B); __a < __b ? __a : __b; })
       |  525|#endif
       |  526|
       |  527|#if !defined(MAX)
       |  528|    #define MAX(A,B)	({ __typeof__(A) __a = (A); __typeof__(B) __b = (B); __a < __b ? __b : __a; })
       |  529|#endif
       |  530|
       |  531|#if !defined(ABS)
       |  532|    #define ABS(A)	({ __typeof__(A) __a = (A); __a < 0 ? -__a : __a; })
       |  533|#endif
       |  534|
       |  535|#endif
       |  536|
       |  537|#else
       |  538|
       |  539|#if !defined(MIN)
       |  540|    #define MIN(A,B)	((A) < (B) ? (A) : (B))
       |  541|#endif
       |  542|
       |  543|#if !defined(MAX)
       |  544|    #define MAX(A,B)	((A) > (B) ? (A) : (B))
       |  545|#endif
       |  546|
       |  547|#if !defined(ABS)
       |  548|    #define ABS(A)	((A) < 0 ? (-(A)) : (A))
       |  549|#endif
       |  550|
       |  551|#endif
       |  552|
       |  553|#endif
       |  554|

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/MacTypes.h:
       |    1|/*
       |    2| * Copyright (c) 1985-2011 by Apple Inc.. All rights reserved.
       |    3| *
       |    4| * @APPLE_LICENSE_HEADER_START@
       |    5| * 
       |    6| * This file contains Original Code and/or Modifications of Original Code
       |    7| * as defined in and that are subject to the Apple Public Source License
       |    8| * Version 2.0 (the 'License'). You may not use this file except in
       |    9| * compliance with the License. Please obtain a copy of the License at
       |   10| * http://www.opensource.apple.com/apsl/ and read it before using this
       |   11| * file.
       |   12| * 
       |   13| * The Original Code and all software distributed under the License are
       |   14| * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
       |   15| * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
       |   16| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
       |   17| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
       |   18| * Please see the License for the specific language governing rights and
       |   19| * limitations under the License.
       |   20| * 
  ------------------
  | main:
  |      1|   16| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
  |      1|   17| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
  |      1|   18| * Please see the License for the specific language governing rights and
  |      1|   19| * limitations under the License.
  |      1|   20| * 
  ------------------
       |   21| * @APPLE_LICENSE_HEADER_END@
       |   22| */
       |   23| 
  ------------------
  | +[OBInjectorController sharedController]:
  |      6|   16| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
  |      6|   17| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
  |      6|   18| * Please see the License for the specific language governing rights and
  |      6|   19| * limitations under the License.
  |      6|   20| * 
  |      6|   21| * @APPLE_LICENSE_HEADER_END@
  |      6|   22| */
  |      6|   23| 
  ------------------
       |   24|/*
       |   25|     File:       MacTypes.h
       |   26| 
       |   27|     Contains:   Basic Macintosh data types.
       |   28| 
       |   29|     Version:    CarbonCore-769~1
       |   30|  
       |   31|     Bugs?:      For bug reports, consult the following page on
       |   32|                 the World Wide Web:
       |   33| 
       |   34|                     http://developer.apple.com/bugreporter/
       |   35| 
       |   36|*/
       |   37|#ifndef __MACTYPES__
       |   38|#define __MACTYPES__
       |   39|
       |   40|#ifndef __CONDITIONALMACROS__
       |   41|#include <ConditionalMacros.h>
       |   42|#endif
       |   43|
       |   44|#include <stdbool.h>
       |   45|
  ------------------
  | -[UILabelToDatePropertyBinding copyWithZone:]:
  |      0|   37|#ifndef __MACTYPES__
  |      0|   38|#define __MACTYPES__
  |      0|   39|
  |      0|   40|#ifndef __CONDITIONALMACROS__
  |      0|   41|#include <ConditionalMacros.h>
  |      0|   42|#endif
  |      0|   43|
  |      0|   44|#include <stdbool.h>
  |      0|   45|
  ------------------
       |   46|#include <sys/types.h>
  ------------------
  | -[OBAbstractTableViewController dealloc]:
  |      0|   41|#include <ConditionalMacros.h>
  |      0|   42|#endif
  |      0|   43|
  |      0|   44|#include <stdbool.h>
  |      0|   45|
  |      0|   46|#include <sys/types.h>
  ------------------
       |   47|
       |   48|#include <Availability.h>
       |   49|
       |   50|#if PRAGMA_ONCE
       |   51|#pragma once
  ------------------
  | -[OBAbstractTableViewController enableModifyInsetsForKeyboard]:
  |      0|   48|#include <Availability.h>
  |      0|   49|
  |      0|   50|#if PRAGMA_ONCE
  |      0|   51|#pragma once
  ------------------
       |   52|#endif
       |   53|
       |   54|#ifdef __cplusplus
       |   55|extern "C" {
       |   56|#endif
  ------------------
  | -[OBAbstractTableViewController disableModifyInsetsForKeyboard]:
  |      0|   53|
  |      0|   54|#ifdef __cplusplus
  |      0|   55|extern "C" {
  |      0|   56|#endif
  ------------------
       |   57|
       |   58|#pragma pack(push, 2)
       |   59|
       |   60|
       |   61|/*
       |   62|        CarbonCore Deprecation flags.
       |   63|
       |   64|     Certain Carbon API functions are deprecated in 10.3 and later
       |   65|      systems.  These will produce a warning when compiling on 10.3.
       |   66|
  ------------------
  | -[OBTableViewController sectionAtIndex:]:
  |     94|   60|
  |     94|   61|/*
  |     94|   62|        CarbonCore Deprecation flags.
  |     94|   63|
  |      0|   64|     Certain Carbon API functions are deprecated in 10.3 and later
  |     94|   65|      systems.  These will produce a warning when compiling on 10.3.
  |     94|   66|
  ------------------
       |   67|        Other functions and constants do not produce meaningful
       |   68|        results when building Carbon for Mac OS X.  For these
       |   69|      functions, no-op macros are provided, but only when the
       |   70|        ALLOW_OBSOLETE_CARBON flag is defined to be 0: eg
  ------------------
  | -[OBTableViewSection isEqualToSection:]:
  |     95|   59|
  |     95|   60|
  |      0|   61|/*
  |      0|   62|        CarbonCore Deprecation flags.
  |     95|   63|
  |      0|   64|     Certain Carbon API functions are deprecated in 10.3 and later
  |      0|   65|      systems.  These will produce a warning when compiling on 10.3.
  |     95|   66|
  |     29|   67|        Other functions and constants do not produce meaningful
  |     29|   68|        results when building Carbon for Mac OS X.  For these
  |     66|   69|      functions, no-op macros are provided, but only when the
  |     95|   70|        ALLOW_OBSOLETE_CARBON flag is defined to be 0: eg
  ------------------
       |   71|      -DALLOW_OBSOLETE_CARBON=0.
       |   72|*/
       |   73|
       |   74|#if  ! defined(ALLOW_OBSOLETE_CARBON) || ! ALLOW_OBSOLETE_CARBON
       |   75|
       |   76|#define ALLOW_OBSOLETE_CARBON_MACMEMORY        0
       |   77|#define ALLOW_OBSOLETE_CARBON_OSUTILS     0
       |   78|
       |   79|#else
       |   80|
       |   81|#define ALLOW_OBSOLETE_CARBON_MACMEMORY       1       /* Removes obsolete constants; turns HLock/HUnlock into no-op macros */
       |   82|#define ALLOW_OBSOLETE_CARBON_OSUTILS       1       /* Removes obsolete structures */
       |   83|
       |   84|#endif
       |   85|
       |   86|#ifndef NULL
       |   87|#define NULL    __DARWIN_NULL
       |   88|#endif /* ! NULL */
       |   89|#ifndef nil
       |   90|  #if defined(__has_feature) 
       |   91|    #if __has_feature(cxx_nullptr)
       |   92|      #define nil nullptr
       |   93|    #else
  3.80k|   94|      #define nil __DARWIN_NULL
       |   95|    #endif
       |   96|  #else
       |   97|    #define nil __DARWIN_NULL
       |   98|  #endif
       |   99|#endif
       |  100|
       |  101|/********************************************************************************
       |  102|
       |  103|    Base integer types for all target OS's and CPU's
       |  104|    
       |  105|        UInt8            8-bit unsigned integer 
  ------------------
  | -[OBTableViewController modelsArrayForSection:]:
  |     90|   88|#endif /* ! NULL */
  |     90|   89|#ifndef nil
  |     90|   90|  #if defined(__has_feature) 
  |     90|   91|    #if __has_feature(cxx_nullptr)
  |      0|   92|      #define nil nullptr
  |      0|   93|    #else
  |     90|   94|      #define nil __DARWIN_NULL
  |     90|   95|    #endif
  |     90|   96|  #else
  |     24|   97|    #define nil __DARWIN_NULL
  |     24|   98|  #endif
  |     24|   99|#endif
  |     24|  100|
  |     24|  101|/********************************************************************************
  |     24|  102|
  |     90|  103|    Base integer types for all target OS's and CPU's
  |     90|  104|    
  |     90|  105|        UInt8            8-bit unsigned integer 
  ------------------
       |  106|        SInt8            8-bit signed integer
       |  107|        UInt16          16-bit unsigned integer 
       |  108|        SInt16          16-bit signed integer           
       |  109|        UInt32          32-bit unsigned integer 
       |  110|        SInt32          32-bit signed integer   
       |  111|        UInt64          64-bit unsigned integer 
       |  112|        SInt64          64-bit signed integer   
       |  113|
       |  114|*********************************************************************************/
       |  115|typedef unsigned char                   UInt8;
       |  116|typedef signed char                     SInt8;
       |  117|typedef unsigned short                  UInt16;
       |  118|typedef signed short                    SInt16;
       |  119|
       |  120|#if __LP64__
       |  121|typedef unsigned int                    UInt32;
       |  122|typedef signed int                      SInt32;
  ------------------
  | -[OBPropertyInjector setProperty:to:]:
  |      0|  116|typedef signed char                     SInt8;
  |      0|  117|typedef unsigned short                  UInt16;
  |      0|  118|typedef signed short                    SInt16;
  |      0|  119|
  |      0|  120|#if __LP64__
  |      0|  121|typedef unsigned int                    UInt32;
  |      0|  122|typedef signed int                      SInt32;
  ------------------
       |  123|#else
       |  124|typedef unsigned long                   UInt32;
       |  125|typedef signed long                     SInt32;
  ------------------
  | -[OBTableViewController indexPathForModel:]:
  |     12|  116|typedef signed char                     SInt8;
  |     12|  117|typedef unsigned short                  UInt16;
  |     12|  118|typedef signed short                    SInt16;
  |     12|  119|
  |     12|  120|#if __LP64__
  |     12|  121|typedef unsigned int                    UInt32;
  |     12|  122|typedef signed int                      SInt32;
  |     12|  123|#else
  |      0|  124|typedef unsigned long                   UInt32;
  |     12|  125|typedef signed long                     SInt32;
  ------------------
       |  126|#endif
       |  127|
       |  128|/* avoid redeclaration if libkern/OSTypes.h */
       |  129|#ifndef _OS_OSTYPES_H
       |  130|#if TARGET_RT_BIG_ENDIAN
       |  131|struct wide {
       |  132|  SInt32              hi;
       |  133|  UInt32              lo;
       |  134|};
       |  135|typedef struct wide                     wide;
       |  136|struct UnsignedWide {
       |  137|  UInt32              hi;
       |  138|  UInt32              lo;
       |  139|};
       |  140|typedef struct UnsignedWide             UnsignedWide;
       |  141|#else
       |  142|struct wide {
       |  143|  UInt32              lo;
       |  144|  SInt32              hi;
       |  145|};
       |  146|typedef struct wide                     wide;
       |  147|struct UnsignedWide {
       |  148|  UInt32              lo;
       |  149|  UInt32              hi;
       |  150|};
       |  151|typedef struct UnsignedWide             UnsignedWide;
       |  152|#endif  /* TARGET_RT_BIG_ENDIAN */
       |  153|
       |  154|#endif
       |  155|
       |  156|#if TYPE_LONGLONG
       |  157|/*
       |  158|  Note:   wide and UnsignedWide must always be structs for source code
       |  159|           compatibility. On the other hand UInt64 and SInt64 can be
       |  160|          either a struct or a long long, depending on the compiler.
  ------------------
  | -[OBAbstractTableViewController tableView:cellForRowAtIndexPath:]:
  |      6|  123|#else
  |      6|  124|typedef unsigned long                   UInt32;
  |      6|  125|typedef signed long                     SInt32;
  |      0|  126|#endif
  |      0|  127|
  |      0|  128|/* avoid redeclaration if libkern/OSTypes.h */
  |      6|  129|#ifndef _OS_OSTYPES_H
  |      6|  130|#if TARGET_RT_BIG_ENDIAN
  |      6|  131|struct wide {
  |      6|  132|  SInt32              hi;
  |      1|  133|  UInt32              lo;
  |      5|  134|};
  |      5|  135|typedef struct wide                     wide;
  |      5|  136|struct UnsignedWide {
  |      6|  137|  UInt32              hi;
  |      6|  138|  UInt32              lo;
  |      5|  139|};
  |      5|  140|typedef struct UnsignedWide             UnsignedWide;
  |      5|  141|#else
  |      6|  142|struct wide {
  |      6|  143|  UInt32              lo;
  |      6|  144|  SInt32              hi;
  |      6|  145|};
  |      6|  146|typedef struct wide                     wide;
  |      6|  147|struct UnsignedWide {
  |      6|  148|  UInt32              lo;
  |      6|  149|  UInt32              hi;
  |      6|  150|};
  |      6|  151|typedef struct UnsignedWide             UnsignedWide;
  |      2|  152|#endif  /* TARGET_RT_BIG_ENDIAN */
  |      1|  153|
  |      1|  154|#endif
  |      1|  155|
  |      1|  156|#if TYPE_LONGLONG
  |      1|  157|/*
  |      2|  158|  Note:   wide and UnsignedWide must always be structs for source code
  |      6|  159|           compatibility. On the other hand UInt64 and SInt64 can be
  |      6|  160|          either a struct or a long long, depending on the compiler.
  ------------------
       |  161|         
       |  162|           If you use UInt64 and SInt64 you should do all operations on 
       |  163|          those data types through the functions/macros in Math64.h.  
       |  164|           This will assure that your code compiles with compilers that
  ------------------
  | -[OBProperty isEqualToProperty:]:
  |  3.69k|  147|struct UnsignedWide {
  |  3.69k|  148|  UInt32              lo;
  |      0|  149|  UInt32              hi;
  |      0|  150|};
  |  3.69k|  151|typedef struct UnsignedWide             UnsignedWide;
  |      0|  152|#endif  /* TARGET_RT_BIG_ENDIAN */
  |      0|  153|
  |  3.69k|  154|#endif
  |  1.68k|  155|
  |  1.68k|  156|#if TYPE_LONGLONG
  |  2.00k|  157|/*
  |  1.86k|  158|  Note:   wide and UnsignedWide must always be structs for source code
  |  1.86k|  159|           compatibility. On the other hand UInt64 and SInt64 can be
  |    138|  160|          either a struct or a long long, depending on the compiler.
  |     82|  161|         
  |     82|  162|           If you use UInt64 and SInt64 you should do all operations on 
  |     56|  163|          those data types through the functions/macros in Math64.h.  
  |    138|  164|           This will assure that your code compiles with compilers that
  ------------------
       |  165|           support long long and those that don't.
       |  166|            
       |  167|           The MS Visual C/C++ compiler uses __int64 instead of long long. 
       |  168|*/
  ------------------
  | -[OBPropertyInjector instanceForClass:]:
  |      0|  161|         
  |      0|  162|           If you use UInt64 and SInt64 you should do all operations on 
  |      0|  163|          those data types through the functions/macros in Math64.h.  
  |      0|  164|           This will assure that your code compiles with compilers that
  |      0|  165|           support long long and those that don't.
  |      0|  166|            
  |      0|  167|           The MS Visual C/C++ compiler uses __int64 instead of long long. 
  |      0|  168|*/
  ------------------
       |  169|    #if defined(_MSC_VER) && !defined(__MWERKS__) && defined(_M_IX86)
       |  170|      typedef   signed __int64                SInt64;
       |  171|        typedef unsigned __int64                UInt64;
       |  172|    #else
       |  173|      typedef   signed long long              SInt64;
       |  174|        typedef unsigned long long              UInt64;
       |  175|    #endif
       |  176|#else
       |  177|
       |  178|
       |  179|typedef wide                            SInt64;
       |  180|typedef UnsignedWide                    UInt64;
       |  181|#endif  /* TYPE_LONGLONG */
  ------------------
  | -[OBAbstractTableViewController modelAtIndexPath:]:
  |      8|  175|    #endif
  |      8|  176|#else
  |      8|  177|
  |      8|  178|
  |      8|  179|typedef wide                            SInt64;
  |      0|  180|typedef UnsignedWide                    UInt64;
  |      8|  181|#endif  /* TYPE_LONGLONG */
  ------------------
       |  182|
       |  183|/********************************************************************************
       |  184|
       |  185|    Base fixed point types 
       |  186|    
       |  187|        Fixed           16-bit signed integer plus 16-bit fraction
       |  188|        UnsignedFixed   16-bit unsigned integer plus 16-bit fraction
       |  189|        Fract           2-bit signed integer plus 30-bit fraction
       |  190|        ShortFixed      8-bit signed integer plus 8-bit fraction
       |  191|        
       |  192|*********************************************************************************/
       |  193|typedef SInt32                          Fixed;
       |  194|typedef Fixed *                         FixedPtr;
       |  195|typedef SInt32                          Fract;
       |  196|typedef Fract *                         FractPtr;
       |  197|typedef UInt32                          UnsignedFixed;
       |  198|typedef UnsignedFixed *                 UnsignedFixedPtr;
       |  199|typedef short                           ShortFixed;
       |  200|typedef ShortFixed *                    ShortFixedPtr;
       |  201|
       |  202|
       |  203|/********************************************************************************
       |  204|
       |  205|    Base floating point types 
       |  206|    
       |  207|        Float32         32 bit IEEE float:  1 sign bit, 8 exponent bits, 23 fraction bits
       |  208|        Float64         64 bit IEEE float:  1 sign bit, 11 exponent bits, 52 fraction bits  
       |  209|        Float80         80 bit MacOS float: 1 sign bit, 15 exponent bits, 1 integer bit, 63 fraction bits
       |  210|        Float96         96 bit 68881 float: 1 sign bit, 15 exponent bits, 16 pad bits, 1 integer bit, 63 fraction bits
       |  211|        
       |  212|    Note: These are fixed size floating point types, useful when writing a floating
       |  213|          point value to disk.  If your compiler does not support a particular size 
       |  214|          float, a struct is used instead.
       |  215|          Use of of the NCEG types (e.g. double_t) or an ANSI C type (e.g. double) if
       |  216|          you want a floating point representation that is natural for any given
       |  217|          compiler, but might be a different size on different compilers.
       |  218|
       |  219|*********************************************************************************/
       |  220|typedef float               Float32;
       |  221|typedef double              Float64;
       |  222|struct Float80 {
       |  223|    SInt16  exp;
       |  224|    UInt16  man[4];
       |  225|};
       |  226|typedef struct Float80 Float80;
       |  227|
       |  228|struct Float96 {
       |  229|    SInt16  exp[2];     /* the second 16-bits are undefined */
       |  230|    UInt16  man[4];
       |  231|};
       |  232|typedef struct Float96 Float96;
       |  233|struct Float32Point {
       |  234|    Float32             x;
       |  235|    Float32             y;
       |  236|};
       |  237|typedef struct Float32Point Float32Point;
       |  238|
       |  239|/********************************************************************************
       |  240|
       |  241|    MacOS Memory Manager types
       |  242|    
       |  243|        Ptr             Pointer to a non-relocatable block
       |  244|        Handle          Pointer to a master pointer to a relocatable block
       |  245|        Size            The number of bytes in a block (signed for historical reasons)
       |  246|        
       |  247|*********************************************************************************/
       |  248|typedef char *                          Ptr;
       |  249|typedef Ptr *                           Handle;
       |  250|typedef long                            Size;
       |  251|
       |  252|/********************************************************************************
       |  253|
       |  254|    Higher level basic types
       |  255|    
       |  256|        OSErr                   16-bit result error code
       |  257|        OSStatus                32-bit result error code
       |  258|        LogicalAddress          Address in the clients virtual address space
       |  259|        ConstLogicalAddress     Address in the clients virtual address space that will only be read
       |  260|        PhysicalAddress         Real address as used on the hardware bus
       |  261|        BytePtr                 Pointer to an array of bytes
       |  262|        ByteCount               The size of an array of bytes
       |  263|        ByteOffset              An offset into an array of bytes
       |  264|        ItemCount               32-bit iteration count
       |  265|        OptionBits              Standard 32-bit set of bit flags
       |  266|        PBVersion               ?
       |  267|        Duration                32-bit millisecond timer for drivers
       |  268|        AbsoluteTime            64-bit clock
       |  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
       |  270|        LangCode                A particular language (e.g. English), as represented using a particular ScriptCode
       |  271|        RegionCode              Designates a language as used in a particular region (e.g. British vs American
       |  272|                                English) together with other region-dependent characteristics (e.g. date format)
       |  273|        FourCharCode            A 32-bit value made by packing four 1 byte characters together
       |  274|        OSType                  A FourCharCode used in the OS and file system (e.g. creator)
       |  275|        ResType                 A FourCharCode used to tag resources (e.g. 'DLOG')
       |  276|        
       |  277|*********************************************************************************/
       |  278|typedef SInt16                          OSErr;
       |  279|typedef SInt32                          OSStatus;
       |  280|typedef void *                          LogicalAddress;
       |  281|typedef const void *                    ConstLogicalAddress;
       |  282|typedef void *                          PhysicalAddress;
       |  283|typedef UInt8 *                         BytePtr;
       |  284|typedef unsigned long                   ByteCount;
       |  285|typedef unsigned long                   ByteOffset;
       |  286|typedef SInt32                          Duration;
       |  287|typedef UnsignedWide                    AbsoluteTime;
       |  288|typedef UInt32                          OptionBits;
  ------------------
  | -[OBAbstractTableViewController tableView:didSelectRowAtIndexPath:]:
  |      9|  240|
  |      9|  241|    MacOS Memory Manager types
  |      9|  242|    
  |      9|  243|        Ptr             Pointer to a non-relocatable block
  |      9|  244|        Handle          Pointer to a master pointer to a relocatable block
  |      9|  245|        Size            The number of bytes in a block (signed for historical reasons)
  |      0|  246|        
  |      0|  247|*********************************************************************************/
  |      1|  248|typedef char *                          Ptr;
  |      1|  249|typedef Ptr *                           Handle;
  |      1|  250|typedef long                            Size;
  |      1|  251|
  |      1|  252|/********************************************************************************
  |      1|  253|
  |      0|  254|    Higher level basic types
  |      0|  255|    
  |      1|  256|        OSErr                   16-bit result error code
  |      0|  257|        OSStatus                32-bit result error code
  |      8|  258|        LogicalAddress          Address in the clients virtual address space
  |      8|  259|        ConstLogicalAddress     Address in the clients virtual address space that will only be read
  |      2|  260|        PhysicalAddress         Real address as used on the hardware bus
  |      2|  261|        BytePtr                 Pointer to an array of bytes
  |      1|  262|        ByteCount               The size of an array of bytes
  |      1|  263|        ByteOffset              An offset into an array of bytes
  |      2|  264|        ItemCount               32-bit iteration count
  |      1|  265|        OptionBits              Standard 32-bit set of bit flags
  |      1|  266|        PBVersion               ?
  |      1|  267|        Duration                32-bit millisecond timer for drivers
  |      2|  268|        AbsoluteTime            64-bit clock
  |      6|  269|        ScriptCode              A particular set of written characters (e.g. Roman vs Cyrillic) and their encoding
  |      6|  270|        LangCode                A particular language (e.g. English), as represented using a particular ScriptCode
  |      6|  271|        RegionCode              Designates a language as used in a particular region (e.g. British vs American
  |      2|  272|                                English) together with other region-dependent characteristics (e.g. date format)
  |      2|  273|        FourCharCode            A 32-bit value made by packing four 1 byte characters together
  |      6|  274|        OSType                  A FourCharCode used in the OS and file system (e.g. creator)
  |      5|  275|        ResType                 A FourCharCode used to tag resources (e.g. 'DLOG')
  |      5|  276|        
  |      5|  277|*********************************************************************************/
  |      6|  278|typedef SInt16                          OSErr;
  |      8|  279|typedef SInt32                          OSStatus;
  |      0|  280|typedef void *                          LogicalAddress;
  |      9|  281|typedef const void *                    ConstLogicalAddress;
  |      9|  282|typedef void *                          PhysicalAddress;
  |      9|  283|typedef UInt8 *                         BytePtr;
  |      9|  284|typedef unsigned long                   ByteCount;
  |      4|  285|typedef unsigned long                   ByteOffset;
  |      4|  286|typedef SInt32                          Duration;
  |      9|  287|typedef UnsignedWide                    AbsoluteTime;
  |      9|  288|typedef UInt32                          OptionBits;
  ------------------
       |  289|typedef unsigned long                   ItemCount;
       |  290|typedef UInt32                          PBVersion;
       |  291|typedef SInt16                          ScriptCode;
       |  292|typedef SInt16                          LangCode;
       |  293|typedef SInt16                          RegionCode;
       |  294|typedef UInt32                          FourCharCode;
       |  295|typedef FourCharCode                    OSType;
       |  296|typedef FourCharCode                    ResType;
       |  297|typedef OSType *                        OSTypePtr;
       |  298|typedef ResType *                       ResTypePtr;
       |  299|/********************************************************************************
       |  300|
       |  301|    Boolean types and values
       |  302|    
  ------------------
  | -[OBAbstractTableViewController indexPathForModel:]:
  |      0|  300|
  |      0|  301|    Boolean types and values
  |      0|  302|    
  ------------------
       |  303|        Boolean         Mac OS historic type, sizeof(Boolean)==1
       |  304|        bool            Defined in stdbool.h, ISO C/C++ standard type
       |  305|        false           Now defined in stdbool.h
       |  306|        true            Now defined in stdbool.h
       |  307|        
       |  308|*********************************************************************************/
       |  309|typedef unsigned char                   Boolean;
       |  310|/********************************************************************************
       |  311|
       |  312|    Function Pointer Types
       |  313|    
       |  314|        ProcPtr                 Generic pointer to a function
       |  315|        Register68kProcPtr      Pointer to a 68K function that expects parameters in registers
       |  316|        UniversalProcPtr        Pointer to classic 68K code or a RoutineDescriptor
       |  317|        
       |  318|        ProcHandle              Pointer to a ProcPtr
       |  319|        UniversalProcHandle     Pointer to a UniversalProcPtr
       |  320|        
       |  321|*********************************************************************************/
       |  322|typedef CALLBACK_API_C( long , ProcPtr )();
       |  323|typedef CALLBACK_API( void , Register68kProcPtr )();
       |  324|#if TARGET_RT_MAC_CFM
       |  325|/*  The RoutineDescriptor structure is defined in MixedMode.h */
       |  326|typedef struct RoutineDescriptor *UniversalProcPtr;
  ------------------
  | -[OBAbstractTableViewController setSelectedModel:]:
  |      5|  305|        false           Now defined in stdbool.h
  |      5|  306|        true            Now defined in stdbool.h
  |      0|  307|        
  |      0|  308|*********************************************************************************/
  |      0|  309|typedef unsigned char                   Boolean;
  |      5|  310|/********************************************************************************
  |      5|  311|
  |      5|  312|    Function Pointer Types
  |      1|  313|    
  |      1|  314|        ProcPtr                 Generic pointer to a function
  |      5|  315|        Register68kProcPtr      Pointer to a 68K function that expects parameters in registers
  |      5|  316|        UniversalProcPtr        Pointer to classic 68K code or a RoutineDescriptor
  |      5|  317|        
  |      5|  318|        ProcHandle              Pointer to a ProcPtr
  |      0|  319|        UniversalProcHandle     Pointer to a UniversalProcPtr
  |      0|  320|        
  |      0|  321|*********************************************************************************/
  |      5|  322|typedef CALLBACK_API_C( long , ProcPtr )();
  |      5|  323|typedef CALLBACK_API( void , Register68kProcPtr )();
  |      5|  324|#if TARGET_RT_MAC_CFM
  |      5|  325|/*  The RoutineDescriptor structure is defined in MixedMode.h */
  |      5|  326|typedef struct RoutineDescriptor *UniversalProcPtr;
  ------------------
       |  327|#else
       |  328|typedef ProcPtr                         UniversalProcPtr;
       |  329|#endif  /* TARGET_RT_MAC_CFM */
       |  330|
       |  331|typedef ProcPtr *                       ProcHandle;
       |  332|typedef UniversalProcPtr *              UniversalProcHandle;
       |  333|/********************************************************************************
       |  334|
       |  335|    RefCon Types
  ------------------
  | -[OBAbstractTableViewController modelForCell:]:
  |      0|  329|#endif  /* TARGET_RT_MAC_CFM */
  |      0|  330|
  |      0|  331|typedef ProcPtr *                       ProcHandle;
  |      0|  332|typedef UniversalProcPtr *              UniversalProcHandle;
  |      0|  333|/********************************************************************************
  |      0|  334|
  |      0|  335|    RefCon Types
  ------------------
       |  336|    
       |  337|        For access to private data in callbacks, etc.; refcons are generally
       |  338|        used as a pointer to something, but in the 32-bit world refcons in
       |  339|        different APIs have had various types: pointer, unsigned scalar, and
       |  340|        signed scalar. The RefCon types defined here support the current 32-bit
       |  341|        usage but provide normalization to pointer types for 64-bit.
       |  342|        
       |  343|        PRefCon is preferred for new APIs; URefCon and SRefCon are primarily
       |  344|        for compatibility with existing APIs.
       |  345|        
       |  346|*********************************************************************************/
       |  347|typedef void *                          PRefCon;
       |  348|#if __LP64__
       |  349|typedef void *                          URefCon;
       |  350|typedef void *                          SRefCon;
  ------------------
  | -[OBAbstractTableViewController modelsForSectionIndex:]:
  |      0|  348|#if __LP64__
  |      0|  349|typedef void *                          URefCon;
  |      0|  350|typedef void *                          SRefCon;
  ------------------
       |  351|#else
       |  352|typedef UInt32                          URefCon;
       |  353|typedef SInt32                          SRefCon;
       |  354|#endif  /* __LP64__ */
       |  355|
       |  356|/********************************************************************************
       |  357|
       |  358|    Common Constants
       |  359|    
       |  360|        noErr                   OSErr: function performed properly - no error
       |  361|        kNilOptions             OptionBits: all flags false
  ------------------
  | -[OBTableViewController tableView:titleForHeaderInSection:]:
  |     21|  355|
  |     21|  356|/********************************************************************************
  |     21|  357|
  |     21|  358|    Common Constants
  |     21|  359|    
  |      0|  360|        noErr                   OSErr: function performed properly - no error
  |     21|  361|        kNilOptions             OptionBits: all flags false
  ------------------
       |  362|        kInvalidID              KernelID: NULL is for pointers as kInvalidID is for ID's
       |  363|        kVariableLengthArray    array bounds: variable length array
       |  364|
       |  365|    Note: kVariableLengthArray was used in array bounds to specify a variable length array,
       |  366|          usually the last field in a struct.  Now that the C language supports 
       |  367|		  the concept of flexible array members, you can instead use: 
       |  368|		
       |  369|		struct BarList
       |  370|		{
       |  371|			short	listLength;
       |  372|			Bar		elements[];
       |  373|		};
       |  374|
       |  375|		However, this changes the semantics somewhat, as sizeof( BarList ) contains
  ------------------
  | -[OBAbstractTableViewController deselectAll]:
  |      0|  369|		struct BarList
  |      0|  370|		{
  |      0|  371|			short	listLength;
  |      0|  372|			Bar		elements[];
  |      0|  373|		};
  |      0|  374|
  |      0|  375|		However, this changes the semantics somewhat, as sizeof( BarList ) contains
  ------------------
       |  376|		no space for any of the elements, so to allocate a list with space for
       |  377|		the count elements
       |  378|
       |  379|		struct BarList* l = (struct BarList*) malloc( sizeof(BarList) + count * sizeof(Bar) );
       |  380|        
       |  381|*********************************************************************************/
       |  382|enum {
       |  383|  noErr                         = 0
       |  384|};
       |  385|
       |  386|enum {
       |  387|  kNilOptions                   = 0
       |  388|};
       |  389|
       |  390|#define kInvalidID   0
       |  391|enum {
       |  392|  kVariableLengthArray  
       |  393|#ifdef __has_extension
       |  394|   #if __has_extension(enumerator_attributes)
       |  395|		__attribute__((deprecated))  
       |  396|	#endif
       |  397|#endif
       |  398|  = 1
       |  399|};
       |  400|
       |  401|enum {
       |  402|  kUnknownType                  = 0x3F3F3F3F /* "????" QuickTime 3.0: default unknown ResType or OSType */
       |  403|};
       |  404|
       |  405|
       |  406|
       |  407|/********************************************************************************
       |  408|
       |  409|    String Types and Unicode Types
       |  410|    
  ------------------
  | -[OBAbstractTableViewController keyboardDidShow:]:
  |      0|  394|   #if __has_extension(enumerator_attributes)
  |      0|  395|		__attribute__((deprecated))  
  |      0|  396|	#endif
  |      0|  397|#endif
  |      0|  398|  = 1
  |      0|  399|};
  |      0|  400|
  |      0|  401|enum {
  |      0|  402|  kUnknownType                  = 0x3F3F3F3F /* "????" QuickTime 3.0: default unknown ResType or OSType */
  |      0|  403|};
  |      0|  404|
  |      0|  405|
  |      0|  406|
  |      0|  407|/********************************************************************************
  |      0|  408|
  |      0|  409|    String Types and Unicode Types
  |      0|  410|    
  ------------------
       |  411|        UnicodeScalarValue,     A complete Unicode character in UTF-32 format, with
       |  412|        UTF32Char               values from 0 through 0x10FFFF (excluding the surrogate
       |  413|                                range 0xD800-0xDFFF and certain disallowed values).
       |  414|
       |  415|        UniChar,                A 16-bit Unicode code value in the default UTF-16 format.
       |  416|        UTF16Char               UnicodeScalarValues 0-0xFFFF are expressed in UTF-16
       |  417|                                format using a single UTF16Char with the same value.
       |  418|                                UnicodeScalarValues 0x10000-0x10FFFF are expressed in
       |  419|                                UTF-16 format using a pair of UTF16Chars - one in the
       |  420|                                high surrogate range (0xD800-0xDBFF) followed by one in
       |  421|                                the low surrogate range (0xDC00-0xDFFF). All of the
       |  422|                                characters defined in Unicode versions through 3.0 are
       |  423|                                in the range 0-0xFFFF and can be expressed using a single
       |  424|                                UTF16Char, thus the term "Unicode character" generally
       |  425|                                refers to a UniChar = UTF16Char.
       |  426|
       |  427|        UTF8Char                An 8-bit code value in UTF-8 format. UnicodeScalarValues
       |  428|                                0-0x7F are expressed in UTF-8 format using one UTF8Char
       |  429|                                with the same value. UnicodeScalarValues above 0x7F are
       |  430|                                expressed in UTF-8 format using 2-4 UTF8Chars, all with
       |  431|                                values in the range 0x80-0xF4 (UnicodeScalarValues
       |  432|                                0x100-0xFFFF use two or three UTF8Chars,
       |  433|                                UnicodeScalarValues 0x10000-0x10FFFF use four UTF8Chars).
       |  434|
       |  435|        UniCharCount            A count of UTF-16 code values in an array or buffer.
       |  436|
       |  437|        StrNNN                  Pascal string holding up to NNN bytes
       |  438|        StringPtr               Pointer to a pascal string
       |  439|        StringHandle            Pointer to a StringPtr
       |  440|        ConstStringPtr          Pointer to a read-only pascal string
       |  441|        ConstStrNNNParam        For function parameters only - means string is const
       |  442|        
       |  443|        CStringPtr              Pointer to a C string           (in C:  char*)
       |  444|        ConstCStringPtr         Pointer to a read-only C string (in C:  const char*)
       |  445|        
       |  446|    Note: The length of a pascal string is stored as the first byte.
       |  447|          A pascal string does not have a termination byte.
       |  448|          A pascal string can hold at most 255 bytes of data.
       |  449|          The first character in a pascal string is offset one byte from the start of the string. 
       |  450|          
       |  451|          A C string is terminated with a byte of value zero.  
       |  452|          A C string has no length limitation.
       |  453|          The first character in a C string is the zeroth byte of the string. 
       |  454|          
       |  455|        
       |  456|*********************************************************************************/
       |  457|typedef UInt32                          UnicodeScalarValue;
       |  458|typedef UInt32                          UTF32Char;
       |  459|typedef UInt16                          UniChar;
       |  460|typedef UInt16                          UTF16Char;
       |  461|typedef UInt8                           UTF8Char;
       |  462|typedef UniChar *                       UniCharPtr;
       |  463|typedef unsigned long                   UniCharCount;
       |  464|typedef UniCharCount *                  UniCharCountPtr;
       |  465|typedef unsigned char                   Str255[256];
       |  466|typedef unsigned char                   Str63[64];
       |  467|typedef unsigned char                   Str32[33];
       |  468|typedef unsigned char                   Str31[32];
       |  469|typedef unsigned char                   Str27[28];
       |  470|typedef unsigned char                   Str15[16];
       |  471|/*
       |  472|    The type Str32 is used in many AppleTalk based data structures.
       |  473|    It holds up to 32 one byte chars.  The problem is that with the
       |  474|    length byte it is 33 bytes long.  This can cause weird alignment
       |  475|    problems in structures.  To fix this the type "Str32Field" has
       |  476|    been created.  It should only be used to hold 32 chars, but
       |  477|    it is 34 bytes long so that there are no alignment problems.
       |  478|*/
       |  479|typedef unsigned char                   Str32Field[34];
       |  480|/*
       |  481|    QuickTime 3.0:
       |  482|    The type StrFileName is used to make MacOS structs work 
       |  483|    cross-platform.  For example FSSpec or SFReply previously
       |  484|    contained a Str63 field.  They now contain a StrFileName
       |  485|    field which is the same when targeting the MacOS but is
       |  486|    a 256 char buffer for Win32 and unix, allowing them to
       |  487|    contain long file names.
       |  488|*/
       |  489|typedef Str63                           StrFileName;
       |  490|typedef unsigned char *                 StringPtr;
       |  491|typedef StringPtr *                     StringHandle;
       |  492|typedef const unsigned char *           ConstStringPtr;
       |  493|typedef const unsigned char *           ConstStr255Param;
       |  494|typedef const unsigned char *           ConstStr63Param;
       |  495|typedef const unsigned char *           ConstStr32Param;
       |  496|typedef const unsigned char *           ConstStr31Param;
       |  497|typedef const unsigned char *           ConstStr27Param;
       |  498|typedef const unsigned char *           ConstStr15Param;
       |  499|typedef ConstStr63Param                 ConstStrFileNameParam;
       |  500|#ifdef __cplusplus
       |  501|inline unsigned char StrLength(ConstStr255Param string) { return (*string); }
       |  502|#else
       |  503|#define StrLength(string) (*(unsigned char *)(string))
       |  504|#endif  /* defined(__cplusplus) */
       |  505|
       |  506|#if OLDROUTINENAMES
       |  507|#define Length(string) StrLength(string)
       |  508|#endif  /* OLDROUTINENAMES */
       |  509|
       |  510|/********************************************************************************
       |  511|
       |  512|    Process Manager type ProcessSerialNumber (previously in Processes.h)
       |  513|
       |  514|*********************************************************************************/
       |  515|/* type for unique process identifier */
       |  516|struct ProcessSerialNumber {
       |  517|  UInt32              highLongOfPSN;
       |  518|  UInt32              lowLongOfPSN;
       |  519|};
       |  520|typedef struct ProcessSerialNumber      ProcessSerialNumber;
       |  521|typedef ProcessSerialNumber *           ProcessSerialNumberPtr;
       |  522|/********************************************************************************
       |  523|
       |  524|    Quickdraw Types
       |  525|    
       |  526|        Point               2D Quickdraw coordinate, range: -32K to +32K
       |  527|        Rect                Rectangular Quickdraw area
       |  528|        Style               Quickdraw font rendering styles
       |  529|        StyleParameter      Style when used as a parameter (historical 68K convention)
       |  530|        StyleField          Style when used as a field (historical 68K convention)
       |  531|        CharParameter       Char when used as a parameter (historical 68K convention)
       |  532|        
       |  533|    Note:   The original Macintosh toolbox in 68K Pascal defined Style as a SET.  
       |  534|            Both Style and CHAR occupy 8-bits in packed records or 16-bits when 
       |  535|            used as fields in non-packed records or as parameters. 
       |  536|        
       |  537|*********************************************************************************/
       |  538|struct Point {
       |  539|  short               v;
       |  540|  short               h;
       |  541|};
       |  542|typedef struct Point                    Point;
       |  543|typedef Point *                         PointPtr;
       |  544|struct Rect {
       |  545|  short               top;
       |  546|  short               left;
       |  547|  short               bottom;
       |  548|  short               right;
       |  549|};
       |  550|typedef struct Rect                     Rect;
       |  551|typedef Rect *                          RectPtr;
       |  552|struct FixedPoint {
       |  553|  Fixed               x;
       |  554|  Fixed               y;
       |  555|};
       |  556|typedef struct FixedPoint               FixedPoint;
       |  557|struct FixedRect {
       |  558|  Fixed               left;
       |  559|  Fixed               top;
       |  560|  Fixed               right;
       |  561|  Fixed               bottom;
       |  562|};
       |  563|typedef struct FixedRect                FixedRect;
       |  564|
       |  565|typedef short                           CharParameter;
       |  566|enum {
       |  567|  normal                        = 0,
       |  568|  bold                          = 1,
       |  569|  italic                        = 2,
       |  570|  underline                     = 4,
       |  571|  outline                       = 8,
       |  572|  shadow                        = 0x10,
       |  573|  condense                      = 0x20,
       |  574|  extend                        = 0x40
       |  575|};
       |  576|
       |  577|typedef unsigned char                   Style;
       |  578|typedef short                           StyleParameter;
       |  579|typedef Style                           StyleField;
       |  580|
       |  581|
       |  582|/********************************************************************************
       |  583|
       |  584|    QuickTime TimeBase types (previously in Movies.h)
       |  585|    
       |  586|        TimeValue           Count of units
       |  587|        TimeScale           Units per second
       |  588|        CompTimeValue       64-bit count of units (always a struct) 
       |  589|        TimeValue64         64-bit count of units (long long or struct) 
       |  590|        TimeBase            An opaque reference to a time base
       |  591|        TimeRecord          Package of TimeBase, duration, and scale
       |  592|        
       |  593|*********************************************************************************/
       |  594|typedef SInt32                          TimeValue;
       |  595|typedef SInt32                          TimeScale;
       |  596|typedef wide                            CompTimeValue;
       |  597|typedef SInt64                          TimeValue64;
       |  598|typedef struct TimeBaseRecord*          TimeBase;
       |  599|struct TimeRecord {
       |  600|  CompTimeValue       value;                  /* units (duration or absolute) */
       |  601|  TimeScale           scale;                  /* units per second */
       |  602|  TimeBase            base;                   /* refernce to the time base */
       |  603|};
       |  604|typedef struct TimeRecord               TimeRecord;
       |  605|
       |  606|/********************************************************************************
       |  607|
       |  608|    THINK C base objects
       |  609|
       |  610|        HandleObject        Root class for handle based THINK C++ objects
       |  611|        PascalObject        Root class for pascal style objects in THINK C++ 
       |  612|
       |  613|*********************************************************************************/
       |  614|#if defined(__SC__) && !defined(__STDC__) && defined(__cplusplus)
       |  615|        class __machdl HandleObject {};
       |  616|        #if TARGET_CPU_68K
       |  617|            class __pasobj PascalObject {};
       |  618|        #endif
       |  619|#endif
       |  620|
       |  621|
       |  622|/********************************************************************************
       |  623|
       |  624|    MacOS versioning structures
       |  625|    
       |  626|        VersRec                 Contents of a 'vers' resource
       |  627|        VersRecPtr              Pointer to a VersRecPtr
       |  628|        VersRecHndl             Resource Handle containing a VersRec
       |  629|        NumVersion              Packed BCD version representation (e.g. "4.2.1a3" is 0x04214003)
       |  630|        UniversalProcPtr        Pointer to classic 68K code or a RoutineDescriptor
       |  631|        
       |  632|        ProcHandle              Pointer to a ProcPtr
       |  633|        UniversalProcHandle     Pointer to a UniversalProcPtr
       |  634|        
       |  635|*********************************************************************************/
       |  636|#if TARGET_RT_BIG_ENDIAN
       |  637|struct NumVersion {
       |  638|                                              /* Numeric version part of 'vers' resource */
       |  639|  UInt8               majorRev;               /*1st part of version number in BCD*/
       |  640|  UInt8               minorAndBugRev;         /*2nd & 3rd part of version number share a byte*/
       |  641|  UInt8               stage;                  /*stage code: dev, alpha, beta, final*/
       |  642|  UInt8               nonRelRev;              /*revision level of non-released version*/
       |  643|};
       |  644|typedef struct NumVersion               NumVersion;
       |  645|#else
       |  646|struct NumVersion {
       |  647|                                              /* Numeric version part of 'vers' resource accessable in little endian format */
       |  648|  UInt8               nonRelRev;              /*revision level of non-released version*/
       |  649|  UInt8               stage;                  /*stage code: dev, alpha, beta, final*/
       |  650|  UInt8               minorAndBugRev;         /*2nd & 3rd part of version number share a byte*/
       |  651|  UInt8               majorRev;               /*1st part of version number in BCD*/
       |  652|};
       |  653|typedef struct NumVersion               NumVersion;
       |  654|#endif  /* TARGET_RT_BIG_ENDIAN */
       |  655|
       |  656|enum {
       |  657|                                        /* Version Release Stage Codes */
       |  658|  developStage                  = 0x20,
       |  659|  alphaStage                    = 0x40,
       |  660|  betaStage                     = 0x60,
       |  661|  finalStage                    = 0x80
       |  662|};
       |  663|
       |  664|union NumVersionVariant {
       |  665|                                              /* NumVersionVariant is a wrapper so NumVersion can be accessed as a 32-bit value */
       |  666|  NumVersion          parts;
       |  667|  UInt32              whole;
       |  668|};
       |  669|typedef union NumVersionVariant         NumVersionVariant;
       |  670|typedef NumVersionVariant *             NumVersionVariantPtr;
       |  671|typedef NumVersionVariantPtr *          NumVersionVariantHandle;
       |  672|struct VersRec {
       |  673|                                              /* 'vers' resource format */
       |  674|  NumVersion          numericVersion;         /*encoded version number*/
       |  675|  short               countryCode;            /*country code from intl utilities*/
       |  676|  Str255              shortVersion;           /*version number string - worst case*/
       |  677|  Str255              reserved;               /*longMessage string packed after shortVersion*/
       |  678|};
       |  679|typedef struct VersRec                  VersRec;
       |  680|typedef VersRec *                       VersRecPtr;
       |  681|typedef VersRecPtr *                    VersRecHndl;
       |  682|/*********************************************************************************
       |  683|
       |  684|    Old names for types
       |  685|        
       |  686|*********************************************************************************/
       |  687|typedef UInt8                           Byte;
       |  688|typedef SInt8                           SignedByte;
       |  689|typedef wide *                          WidePtr;
       |  690|typedef UnsignedWide *                  UnsignedWidePtr;
       |  691|typedef Float80                         extended80;
       |  692|typedef Float96                         extended96;
       |  693|typedef SInt8                           VHSelect;
       |  694|/*********************************************************************************
       |  695|
       |  696|    Debugger functions
       |  697|    
       |  698|*********************************************************************************/
       |  699|/*
       |  700| *  Debugger()
       |  701| *  
       |  702| *  Availability:
       |  703| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
       |  704| *    CarbonLib:        in CarbonLib 1.0 and later
       |  705| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  706| */
       |  707|extern void 
       |  708|Debugger(void)                                                __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
       |  709|
       |  710|
       |  711|/*
       |  712| *  DebugStr()
       |  713| *  
       |  714| *  Availability:
       |  715| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
       |  716| *    CarbonLib:        in CarbonLib 1.0 and later
       |  717| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  718| */
       |  719|extern void 
       |  720|DebugStr(ConstStr255Param debuggerMsg)                        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
       |  721|
       |  722|
       |  723|/*
       |  724| *  debugstr()
       |  725| *  
       |  726| *  Availability:
       |  727| *    Mac OS X:         not available
       |  728| *    CarbonLib:        not available
       |  729| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  730| */
       |  731|
       |  732|
       |  733|#if TARGET_CPU_PPC
       |  734|/* Only for Mac OS native drivers */
       |  735|/*
       |  736| *  SysDebug()
       |  737| *  
       |  738| *  Availability:
       |  739| *    Mac OS X:         not available
       |  740| *    CarbonLib:        not available
       |  741| *    Non-Carbon CFM:   in DriverServicesLib 1.0 and later
       |  742| */
       |  743|
       |  744|
       |  745|/*
       |  746| *  SysDebugStr()
       |  747| *  
       |  748| *  Availability:
       |  749| *    Mac OS X:         not available
       |  750| *    CarbonLib:        not available
       |  751| *    Non-Carbon CFM:   in DriverServicesLib 1.0 and later
       |  752| */
       |  753|
       |  754|
       |  755|#endif  /* TARGET_CPU_PPC */
       |  756|
       |  757|/* SADE break points */
       |  758|/*
       |  759| *  SysBreak()
       |  760| *  
       |  761| *  Availability:
       |  762| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
       |  763| *    CarbonLib:        in CarbonLib 1.0 and later
       |  764| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  765| */
       |  766|extern void 
       |  767|SysBreak(void)                                                __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
       |  768|
       |  769|
       |  770|/*
       |  771| *  SysBreakStr()
       |  772| *  
       |  773| *  Availability:
       |  774| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
       |  775| *    CarbonLib:        in CarbonLib 1.0 and later
       |  776| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  777| */
       |  778|extern void 
       |  779|SysBreakStr(ConstStr255Param debuggerMsg)                     __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
       |  780|
       |  781|
       |  782|/*
       |  783| *  SysBreakFunc()
       |  784| *  
       |  785| *  Availability:
       |  786| *    Mac OS X:         in version 10.0 and later in CoreServices.framework
       |  787| *    CarbonLib:        in CarbonLib 1.0 and later
       |  788| *    Non-Carbon CFM:   in InterfaceLib 7.1 and later
       |  789| */
       |  790|extern void 
       |  791|SysBreakFunc(ConstStr255Param debuggerMsg)                    __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_NA, __IPHONE_NA);
       |  792|
       |  793|
       |  794|/* old names for Debugger and DebugStr */
       |  795|#if OLDROUTINENAMES && TARGET_CPU_68K
       |  796|    #define Debugger68k()   Debugger()
       |  797|    #define DebugStr68k(s)  DebugStr(s)
       |  798|#endif
       |  799|
       |  800|
       |  801|#pragma pack(pop)
       |  802|
       |  803|#ifdef __cplusplus
       |  804|}
       |  805|#endif
       |  806|
       |  807|#endif /* __MACTYPES__ */
       |  808|

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/dispatch/once.h:
       |    1|/*
       |    2| * Copyright (c) 2008-2010 Apple Inc. All rights reserved.
       |    3| *
       |    4| * @APPLE_APACHE_LICENSE_HEADER_START@
       |    5| *
       |    6| * Licensed under the Apache License, Version 2.0 (the "License");
       |    7| * you may not use this file except in compliance with the License.
       |    8| * You may obtain a copy of the License at
       |    9| *
       |   10| *     http://www.apache.org/licenses/LICENSE-2.0
       |   11| *
       |   12| * Unless required by applicable law or agreed to in writing, software
       |   13| * distributed under the License is distributed on an "AS IS" BASIS,
       |   14| * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       |   15| * See the License for the specific language governing permissions and
       |   16| * limitations under the License.
       |   17| *
       |   18| * @APPLE_APACHE_LICENSE_HEADER_END@
       |   19| */
       |   20|
       |   21|#ifndef __DISPATCH_ONCE__
       |   22|#define __DISPATCH_ONCE__
       |   23|
       |   24|#ifndef __DISPATCH_INDIRECT__
       |   25|#error "Please #include <dispatch/dispatch.h> instead of this file directly."
       |   26|#include <dispatch/base.h> // for HeaderDoc
       |   27|#endif
       |   28|
       |   29|__BEGIN_DECLS
       |   30|
       |   31|/*!
       |   32| * @typedef dispatch_once_t
       |   33| *
       |   34| * @abstract
       |   35| * A predicate for use with dispatch_once(). It must be initialized to zero.
       |   36| * Note: static and global variables default to zero.
       |   37| */
       |   38|typedef long dispatch_once_t;
       |   39|
       |   40|/*!
       |   41| * @function dispatch_once
       |   42| *
       |   43| * @abstract
       |   44| * Execute a block once and only once.
       |   45| *
       |   46| * @param predicate
       |   47| * A pointer to a dispatch_once_t that is used to test whether the block has
       |   48| * completed or not.
       |   49| *
       |   50| * @param block
       |   51| * The block to execute once.
       |   52| *
       |   53| * @discussion
       |   54| * Always call dispatch_once() before using or testing any variables that are
       |   55| * initialized by the block.
       |   56| */
       |   57|#ifdef __BLOCKS__
       |   58|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |   59|DISPATCH_EXPORT DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |   60|void
       |   61|dispatch_once(dispatch_once_t *predicate, dispatch_block_t block);
       |   62|
       |   63|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL_ALL DISPATCH_NOTHROW
       |   64|void
       |   65|_dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
       |   66|{
       |   67|	if (DISPATCH_EXPECT(*predicate, ~0l) != ~0l) {
       |   68|		dispatch_once(predicate, block);
       |   69|	}
       |   70|}
       |   71|#undef dispatch_once
      6|   72|#define dispatch_once _dispatch_once
       |   73|#endif
       |   74|
       |   75|__OSX_AVAILABLE_STARTING(__MAC_10_6,__IPHONE_4_0)
       |   76|DISPATCH_EXPORT DISPATCH_NONNULL1 DISPATCH_NONNULL3 DISPATCH_NOTHROW
       |   77|void
       |   78|dispatch_once_f(dispatch_once_t *predicate, void *context,
       |   79|		dispatch_function_t function);
       |   80|
       |   81|DISPATCH_INLINE DISPATCH_ALWAYS_INLINE DISPATCH_NONNULL1 DISPATCH_NONNULL3
       |   82|DISPATCH_NOTHROW
       |   83|void
       |   84|_dispatch_once_f(dispatch_once_t *predicate, void *context,
       |   85|		dispatch_function_t function)
       |   86|{
       |   87|	if (DISPATCH_EXPECT(*predicate, ~0l) != ~0l) {
       |   88|		dispatch_once_f(predicate, context, function);
       |   89|	}
       |   90|}
       |   91|#undef dispatch_once_f
       |   92|#define dispatch_once_f _dispatch_once_f
       |   93|
       |   94|__END_DECLS
       |   95|
       |   96|#endif

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/objc/objc.h:
       |    1|/*
       |    2| * Copyright (c) 1999-2007 Apple Inc.  All Rights Reserved.
       |    3| * 
       |    4| * @APPLE_LICENSE_HEADER_START@
       |    5| * 
       |    6| * This file contains Original Code and/or Modifications of Original Code
       |    7| * as defined in and that are subject to the Apple Public Source License
       |    8| * Version 2.0 (the 'License'). You may not use this file except in
       |    9| * compliance with the License. Please obtain a copy of the License at
       |   10| * http://www.opensource.apple.com/apsl/ and read it before using this
       |   11| * file.
       |   12| * 
       |   13| * The Original Code and all software distributed under the License are
       |   14| * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
       |   15| * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
       |   16| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
       |   17| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
       |   18| * Please see the License for the specific language governing rights and
       |   19| * limitations under the License.
  ------------------
  | -[OBAppDelegate application:didFinishLaunchingWithOptions:]:
  |      1|   17| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
  |      1|   18| * Please see the License for the specific language governing rights and
  |      1|   19| * limitations under the License.
  ------------------
       |   20| * 
       |   21| * @APPLE_LICENSE_HEADER_END@
       |   22| */
       |   23|/*
       |   24| *	objc.h
       |   25| *	Copyright 1988-1996, NeXT Software, Inc.
       |   26| */
       |   27|
  ------------------
  | -[OBTableViewSection init]:
  |     32|   21| * @APPLE_LICENSE_HEADER_END@
  |     32|   22| */
  |     32|   23|/*
  |     32|   24| *	objc.h
  |     32|   25| *	Copyright 1988-1996, NeXT Software, Inc.
  |     32|   26| */
  |     32|   27|
  ------------------
       |   28|#ifndef _OBJC_OBJC_H_
       |   29|#define _OBJC_OBJC_H_
       |   30|
  ------------------
  | -[OBProperty initWithName:andTypeName:]:
  |     70|   21| * @APPLE_LICENSE_HEADER_END@
  |     70|   22| */
  |     70|   23|/*
  |     70|   24| *	objc.h
  |     70|   25| *	Copyright 1988-1996, NeXT Software, Inc.
  |     70|   26| */
  |     70|   27|
  |     70|   28|#ifndef _OBJC_OBJC_H_
  |     70|   29|#define _OBJC_OBJC_H_
  |     70|   30|
  ------------------
       |   31|#include <sys/types.h>      // for __DARWIN_NULL
       |   32|#include <Availability.h>
       |   33|#include <objc/objc-api.h>
       |   34|#include <stdbool.h>
       |   35|
       |   36|#if !OBJC_TYPES_DEFINED
       |   37|/// An opaque type that represents an Objective-C class.
       |   38|typedef struct objc_class *Class;
       |   39|
  ------------------
  | -[OBAbstractTableViewController init]:
  |     34|   29|#define _OBJC_OBJC_H_
  |     34|   30|
  |     34|   31|#include <sys/types.h>      // for __DARWIN_NULL
  |     34|   32|#include <Availability.h>
  |     34|   33|#include <objc/objc-api.h>
  |     34|   34|#include <stdbool.h>
  |     34|   35|
  |     34|   36|#if !OBJC_TYPES_DEFINED
  |     34|   37|/// An opaque type that represents an Objective-C class.
  |     34|   38|typedef struct objc_class *Class;
  |     34|   39|
  ------------------
       |   40|/// Represents an instance of a class.
       |   41|struct objc_object {
       |   42|    Class isa  OBJC_ISA_AVAILABILITY;
       |   43|};
       |   44|
       |   45|/// A pointer to an instance of a class.
       |   46|typedef struct objc_object *id;
       |   47|#endif
       |   48|
       |   49|/// An opaque type that represents a method selector.
       |   50|typedef struct objc_selector *SEL;
       |   51|
       |   52|/// A pointer to the function of a method implementation. 
       |   53|#if !OBJC_OLD_DISPATCH_PROTOTYPES
       |   54|typedef void (*IMP)(void /* id, SEL, ... */ ); 
       |   55|#else
       |   56|typedef id (*IMP)(id, SEL, ...); 
       |   57|#endif
  ------------------
  | -[OBTableViewSection isEqual:]:
  |     95|   48|
  |     95|   49|/// An opaque type that represents a method selector.
  |      0|   50|typedef struct objc_selector *SEL;
  |      0|   51|
  |     95|   52|/// A pointer to the function of a method implementation. 
  |      0|   53|#if !OBJC_OLD_DISPATCH_PROTOTYPES
  |      0|   54|typedef void (*IMP)(void /* id, SEL, ... */ ); 
  |     95|   55|#else
  |     95|   56|typedef id (*IMP)(id, SEL, ...); 
  |     95|   57|#endif
  ------------------
       |   58|
       |   59|#define OBJC_BOOL_DEFINED
       |   60|
       |   61|/// Type to represent a boolean value.
       |   62|#if (TARGET_OS_IPHONE && __LP64__)  ||  TARGET_OS_WATCH
       |   63|#define OBJC_BOOL_IS_BOOL 1
       |   64|typedef bool BOOL;
       |   65|#else
       |   66|#define OBJC_BOOL_IS_CHAR 1
       |   67|typedef signed char BOOL; 
       |   68|// BOOL is explicitly signed so @encode(BOOL) == "c" rather than "C" 
       |   69|// even if -funsigned-char is used.
       |   70|#endif
  ------------------
  | -[OBProperty initWithName:andTypeString:]:
  |  1.09k|   61|/// Type to represent a boolean value.
  |  1.09k|   62|#if (TARGET_OS_IPHONE && __LP64__)  ||  TARGET_OS_WATCH
  |  1.09k|   63|#define OBJC_BOOL_IS_BOOL 1
  |  1.09k|   64|typedef bool BOOL;
  |  1.09k|   65|#else
  |  1.09k|   66|#define OBJC_BOOL_IS_CHAR 1
  |  1.09k|   67|typedef signed char BOOL; 
  |  1.09k|   68|// BOOL is explicitly signed so @encode(BOOL) == "c" rather than "C" 
  |  1.09k|   69|// even if -funsigned-char is used.
  |  1.09k|   70|#endif
  ------------------
  | -[OBTableViewSection isEqualToSection:]:
  |     95|   59|#define OBJC_BOOL_DEFINED
  |     95|   60|
  |      0|   61|/// Type to represent a boolean value.
  |      0|   62|#if (TARGET_OS_IPHONE && __LP64__)  ||  TARGET_OS_WATCH
  |     95|   63|#define OBJC_BOOL_IS_BOOL 1
  |      0|   64|typedef bool BOOL;
  |      0|   65|#else
  |     95|   66|#define OBJC_BOOL_IS_CHAR 1
  |     29|   67|typedef signed char BOOL; 
  |     29|   68|// BOOL is explicitly signed so @encode(BOOL) == "c" rather than "C" 
  |     66|   69|// even if -funsigned-char is used.
  |     95|   70|#endif
  ------------------
       |   71|
       |   72|#if __has_feature(objc_bool)
  1.57k|   73|#define YES __objc_yes
  4.83k|   74|#define NO  __objc_no
  ------------------
  | __47-[OBDemoViewController prepareForSegue:sender:]_block_invoke:
  |      0|   71|
  |      0|   72|#if __has_feature(objc_bool)
  |      0|   73|#define YES __objc_yes
  |      0|   74|#define NO  __objc_no
  ------------------
       |   75|#else
       |   76|#define YES ((BOOL)1)
       |   77|#define NO  ((BOOL)0)
       |   78|#endif
       |   79|
       |   80|#ifndef Nil
  ------------------
  | -[OBProperty initWithName:andClass:]:
  |    416|   72|#if __has_feature(objc_bool)
  |    416|   73|#define YES __objc_yes
  |    416|   74|#define NO  __objc_no
  |    416|   75|#else
  |    416|   76|#define YES ((BOOL)1)
  |    416|   77|#define NO  ((BOOL)0)
  |    416|   78|#endif
  |    416|   79|
  |    416|   80|#ifndef Nil
  ------------------
       |   81|# if __has_feature(cxx_nullptr)
       |   82|#   define Nil nullptr
       |   83|# else
       |   84|#   define Nil __DARWIN_NULL
       |   85|# endif
       |   86|#endif
       |   87|
       |   88|#ifndef nil
       |   89|# if __has_feature(cxx_nullptr)
       |   90|#   define nil nullptr
       |   91|# else
       |   92|#   define nil __DARWIN_NULL
       |   93|# endif
       |   94|#endif
       |   95|
       |   96|#if ! (defined(__OBJC_GC__)  ||  __has_feature(objc_arc))
       |   97|#define __strong /* empty */
       |   98|#endif
       |   99|
       |  100|#if !__has_feature(objc_arc)
  ------------------
  | -[OBProperty parseTypeString:]:
  |  1.09k|   83|# else
  |  1.09k|   84|#   define Nil __DARWIN_NULL
  |  1.09k|   85|# endif
  |  1.09k|   86|#endif
  |  3.53k|   87|
  |  3.53k|   88|#ifndef nil
  |  3.53k|   89|# if __has_feature(cxx_nullptr)
  |    602|   90|#   define nil nullptr
  |    602|   91|# else
  |    595|   92|#   define nil __DARWIN_NULL
  |    595|   93|# endif
  |  2.93k|   94|#endif
  |    497|   95|
  |    497|   96|#if ! (defined(__OBJC_GC__)  ||  __has_feature(objc_arc))
  |  3.53k|   97|#define __strong /* empty */
  |  1.09k|   98|#endif
  |  1.09k|   99|
  |  1.09k|  100|#if !__has_feature(objc_arc)
  ------------------
       |  101|#define __unsafe_unretained /* empty */
       |  102|#define __autoreleasing /* empty */
       |  103|#endif
       |  104|
       |  105|
       |  106|/** 
       |  107| * Returns the name of the method specified by a given selector.
       |  108| * 
       |  109| * @param sel A pointer of type \c SEL. Pass the selector whose name you wish to determine.
       |  110| * 
       |  111| * @return A C string indicating the name of the selector.
       |  112| */
       |  113|OBJC_EXPORT const char *sel_getName(SEL sel)
       |  114|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  ------------------
  | -[OBPropertyInjector injectPropertyTo:registredProperty:]:
  |      0|   88|#ifndef nil
  |      0|   89|# if __has_feature(cxx_nullptr)
  |      0|   90|#   define nil nullptr
  |      0|   91|# else
  |      0|   92|#   define nil __DARWIN_NULL
  |      0|   93|# endif
  |      0|   94|#endif
  |      0|   95|
  |      0|   96|#if ! (defined(__OBJC_GC__)  ||  __has_feature(objc_arc))
  |      0|   97|#define __strong /* empty */
  |      0|   98|#endif
  |      0|   99|
  |      0|  100|#if !__has_feature(objc_arc)
  |      0|  101|#define __unsafe_unretained /* empty */
  |      0|  102|#define __autoreleasing /* empty */
  |      0|  103|#endif
  |      0|  104|
  |      0|  105|
  |      0|  106|/** 
  |      0|  107| * Returns the name of the method specified by a given selector.
  |      0|  108| * 
  |      0|  109| * @param sel A pointer of type \c SEL. Pass the selector whose name you wish to determine.
  |      0|  110| * 
  |      0|  111| * @return A C string indicating the name of the selector.
  |      0|  112| */
  |      0|  113|OBJC_EXPORT const char *sel_getName(SEL sel)
  |      0|  114|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  ------------------
       |  115|
       |  116|/** 
       |  117| * Registers a method with the Objective-C runtime system, maps the method 
       |  118| * name to a selector, and returns the selector value.
       |  119| * 
       |  120| * @param str A pointer to a C string. Pass the name of the method you wish to register.
       |  121| * 
       |  122| * @return A pointer of type SEL specifying the selector for the named method.
  ------------------
  | -[OBPropertyInjector setProperty:to:]:
  |      0|  116|/** 
  |      0|  117| * Registers a method with the Objective-C runtime system, maps the method 
  |      0|  118| * name to a selector, and returns the selector value.
  |      0|  119| * 
  |      0|  120| * @param str A pointer to a C string. Pass the name of the method you wish to register.
  |      0|  121| * 
  |      0|  122| * @return A pointer of type SEL specifying the selector for the named method.
  ------------------
       |  123| * 
       |  124| * @note You must register a method name with the Objective-C runtime system to obtain the
       |  125| *  method’s selector before you can add the method to a class definition. If the method name
       |  126| *  has already been registered, this function simply returns the selector.
       |  127| */
       |  128|OBJC_EXPORT SEL sel_registerName(const char *str)
       |  129|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
       |  130|
       |  131|/** 
       |  132| * Returns the class name of a given object.
       |  133| * 
       |  134| * @param obj An Objective-C object.
       |  135| * 
       |  136| * @return The name of the class of which \e obj is an instance.
       |  137| */
       |  138|OBJC_EXPORT const char *object_getClassName(id obj)
       |  139|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
       |  140|
       |  141|/** 
       |  142| * Returns a pointer to any extra bytes allocated with an instance given object.
       |  143| * 
       |  144| * @param obj An Objective-C object.
  ------------------
  | -[OBPropertyInjector injectDependenciesTo:]:
  |      0|  125| *  method’s selector before you can add the method to a class definition. If the method name
  |      0|  126| *  has already been registered, this function simply returns the selector.
  |      0|  127| */
  |      0|  128|OBJC_EXPORT SEL sel_registerName(const char *str)
  |      0|  129|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  130|
  |      0|  131|/** 
  |      0|  132| * Returns the class name of a given object.
  |      0|  133| * 
  |      0|  134| * @param obj An Objective-C object.
  |      0|  135| * 
  |      0|  136| * @return The name of the class of which \e obj is an instance.
  |      0|  137| */
  |      0|  138|OBJC_EXPORT const char *object_getClassName(id obj)
  |      0|  139|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |      0|  140|
  |      0|  141|/** 
  |      0|  142| * Returns a pointer to any extra bytes allocated with an instance given object.
  |      0|  143| * 
  |      0|  144| * @param obj An Objective-C object.
  ------------------
       |  145| * 
  ------------------
  | -[OBProperty isEqual:]:
  |  3.69k|  136| * @return The name of the class of which \e obj is an instance.
  |  3.69k|  137| */
  |      0|  138|OBJC_EXPORT const char *object_getClassName(id obj)
  |      0|  139|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |  3.69k|  140|
  |      0|  141|/** 
  |      0|  142| * Returns a pointer to any extra bytes allocated with an instance given object.
  |  3.69k|  143| * 
  |  3.69k|  144| * @param obj An Objective-C object.
  |  3.69k|  145| * 
  ------------------
       |  146| * @return A pointer to any extra bytes allocated with \e obj. If \e obj was
       |  147| *   not allocated with any extra bytes, then dereferencing the returned pointer is undefined.
       |  148| * 
       |  149| * @note This function returns a pointer to any extra bytes allocated with the instance
       |  150| *  (as specified by \c class_createInstance with extraBytes>0). This memory follows the
       |  151| *  object's ordinary ivars, but may not be adjacent to the last ivar.
       |  152| * @note The returned pointer is guaranteed to be pointer-size aligned, even if the area following
       |  153| *  the object's last ivar is less aligned than that. Alignment greater than pointer-size is never
       |  154| *  guaranteed, even if the area following the object's last ivar is more aligned than that.
       |  155| * @note In a garbage-collected environment, the memory is scanned conservatively.
       |  156| */
       |  157|OBJC_EXPORT void *object_getIndexedIvars(id obj)
       |  158|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
       |  159|
       |  160|/** 
       |  161| * Identifies a selector as being valid or invalid.
       |  162| * 
       |  163| * @param sel The selector you want to identify.
       |  164| * 
  ------------------
  | -[OBProperty isEqualToProperty:]:
  |  3.69k|  147| *   not allocated with any extra bytes, then dereferencing the returned pointer is undefined.
  |  3.69k|  148| * 
  |      0|  149| * @note This function returns a pointer to any extra bytes allocated with the instance
  |      0|  150| *  (as specified by \c class_createInstance with extraBytes>0). This memory follows the
  |  3.69k|  151| *  object's ordinary ivars, but may not be adjacent to the last ivar.
  |      0|  152| * @note The returned pointer is guaranteed to be pointer-size aligned, even if the area following
  |      0|  153| *  the object's last ivar is less aligned than that. Alignment greater than pointer-size is never
  |  3.69k|  154| *  guaranteed, even if the area following the object's last ivar is more aligned than that.
  |  1.68k|  155| * @note In a garbage-collected environment, the memory is scanned conservatively.
  |  1.68k|  156| */
  |  2.00k|  157|OBJC_EXPORT void *object_getIndexedIvars(id obj)
  |  1.86k|  158|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
  |  1.86k|  159|
  |    138|  160|/** 
  |     82|  161| * Identifies a selector as being valid or invalid.
  |     82|  162| * 
  |     56|  163| * @param sel The selector you want to identify.
  |    138|  164| * 
  ------------------
       |  165| * @return YES if selector is valid and has a function implementation, NO otherwise. 
       |  166| * 
       |  167| * @warning On some platforms, an invalid reference (to invalid memory addresses) can cause
       |  168| *  a crash. 
       |  169| */
       |  170|OBJC_EXPORT BOOL sel_isMapped(SEL sel)
       |  171|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
       |  172|
       |  173|/** 
       |  174| * Registers a method name with the Objective-C runtime system.
       |  175| * 
       |  176| * @param str A pointer to a C string. Pass the name of the method you wish to register.
       |  177| * 
       |  178| * @return A pointer of type SEL specifying the selector for the named method.
       |  179| * 
       |  180| * @note The implementation of this method is identical to the implementation of \c sel_registerName.
       |  181| * @note Prior to OS X version 10.0, this method tried to find the selector mapped to the given name
       |  182| *  and returned \c NULL if the selector was not found. This was changed for safety, because it was
       |  183| *  observed that many of the callers of this function did not check the return value for \c NULL.
       |  184| */
       |  185|OBJC_EXPORT SEL sel_getUid(const char *str)
       |  186|    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_2_0);
       |  187|
       |  188|
       |  189|// Obsolete ARC conversions. Deprecation forthcoming.
       |  190|// Use CFBridgingRetain, CFBridgingRelease, and __bridge casts instead.
       |  191|
       |  192|typedef const void* objc_objectptr_t;
       |  193|
       |  194|#if __has_feature(objc_arc)
       |  195|#   define objc_retainedObject(o) ((__bridge_transfer id)(objc_objectptr_t)(o))
       |  196|#   define objc_unretainedObject(o) ((__bridge id)(objc_objectptr_t)(o))
       |  197|#   define objc_unretainedPointer(o) ((__bridge objc_objectptr_t)(id)(o))
       |  198|#else
       |  199|#   define objc_retainedObject(o) ((id)(objc_objectptr_t)(o))
       |  200|#   define objc_unretainedObject(o) ((id)(objc_objectptr_t)(o))
       |  201|#   define objc_unretainedPointer(o) ((objc_objectptr_t)(id)(o))
       |  202|#endif
       |  203|
       |  204|
       |  205|#if !__OBJC2__
       |  206|
       |  207|// The following declarations are provided here for source compatibility.
       |  208|
       |  209|#if defined(__LP64__)
       |  210|    typedef long arith_t;
       |  211|    typedef unsigned long uarith_t;
       |  212|#   define ARITH_SHIFT 32
       |  213|#else
       |  214|    typedef int arith_t;
       |  215|    typedef unsigned uarith_t;
       |  216|#   define ARITH_SHIFT 16
       |  217|#endif
       |  218|
       |  219|typedef char *STR;
       |  220|
       |  221|#define ISSELECTOR(sel) sel_isMapped(sel)
       |  222|#define SELNAME(sel)	sel_getName(sel)
       |  223|#define SELUID(str)	sel_getUid(str)
       |  224|#define NAMEOF(obj)     object_getClassName(obj)
       |  225|#define IV(obj)         object_getIndexedIvars(obj)
       |  226|
       |  227|#endif
       |  228|
       |  229|#endif  /* _OBJC_OBJC_H_ */

/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/usr/include/sys/_types.h:
       |    1|/*
       |    2| * Copyright (c) 2003-2007 Apple Inc. All rights reserved.
       |    3| *
       |    4| * @APPLE_OSREFERENCE_LICENSE_HEADER_START@
       |    5| * 
       |    6| * This file contains Original Code and/or Modifications of Original Code
       |    7| * as defined in and that are subject to the Apple Public Source License
       |    8| * Version 2.0 (the 'License'). You may not use this file except in
       |    9| * compliance with the License. The rights granted to you under the License
       |   10| * may not be used to create, or enable the creation or redistribution of,
       |   11| * unlawful or unlicensed copies of an Apple operating system, or to
       |   12| * circumvent, violate, or enable the circumvention or violation of, any
       |   13| * terms of an Apple operating system software license agreement.
       |   14| * 
       |   15| * Please obtain a copy of the License at
       |   16| * http://www.opensource.apple.com/apsl/ and read it before using this file.
       |   17| * 
       |   18| * The Original Code and all software distributed under the License are
       |   19| * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
       |   20| * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
  ------------------
  | main:
  |      1|   16| * http://www.opensource.apple.com/apsl/ and read it before using this file.
  |      1|   17| * 
  |      1|   18| * The Original Code and all software distributed under the License are
  |      1|   19| * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
  |      1|   20| * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
  ------------------
       |   21| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
       |   22| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
       |   23| * Please see the License for the specific language governing rights and
  ------------------
  | +[OBInjectorController sharedController]:
  |      6|   16| * http://www.opensource.apple.com/apsl/ and read it before using this file.
  |      6|   17| * 
  |      6|   18| * The Original Code and all software distributed under the License are
  |      6|   19| * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
  |      6|   20| * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
  |      6|   21| * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
  |      6|   22| * FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
  |      6|   23| * Please see the License for the specific language governing rights and
  ------------------
       |   24| * limitations under the License.
       |   25| * 
       |   26| * @APPLE_OSREFERENCE_LICENSE_HEADER_END@
       |   27| */
       |   28|
       |   29|#ifndef _SYS__TYPES_H_
       |   30|#define _SYS__TYPES_H_
       |   31|
       |   32|#include <sys/cdefs.h>
       |   33|#include <machine/_types.h>
       |   34|
       |   35|/*
       |   36| * Type definitions; takes common type definitions that must be used
       |   37| * in multiple header files due to [XSI], removes them from the system
       |   38| * space, and puts them in the implementation space.
       |   39| */
       |   40|
       |   41|#ifdef __cplusplus
       |   42|#ifdef __GNUG__
       |   43|#define __DARWIN_NULL __null
       |   44|#else /* ! __GNUG__ */
       |   45|#ifdef __LP64__
  ------------------
  | -[UILabelToDatePropertyBinding copyWithZone:]:
  |      0|   37| * in multiple header files due to [XSI], removes them from the system
  |      0|   38| * space, and puts them in the implementation space.
  |      0|   39| */
  |      0|   40|
  |      0|   41|#ifdef __cplusplus
  |      0|   42|#ifdef __GNUG__
  |      0|   43|#define __DARWIN_NULL __null
  |      0|   44|#else /* ! __GNUG__ */
  |      0|   45|#ifdef __LP64__
  ------------------
       |   46|#define __DARWIN_NULL (0L)
  ------------------
  | -[OBAbstractTableViewController dealloc]:
  |      0|   41|#ifdef __cplusplus
  |      0|   42|#ifdef __GNUG__
  |      0|   43|#define __DARWIN_NULL __null
  |      0|   44|#else /* ! __GNUG__ */
  |      0|   45|#ifdef __LP64__
  |      0|   46|#define __DARWIN_NULL (0L)
  ------------------
       |   47|#else /* !__LP64__ */
       |   48|#define __DARWIN_NULL 0
       |   49|#endif /* __LP64__ */
       |   50|#endif /* __GNUG__ */
       |   51|#else /* ! __cplusplus */
  ------------------
  | -[OBAbstractTableViewController enableModifyInsetsForKeyboard]:
  |      0|   48|#define __DARWIN_NULL 0
  |      0|   49|#endif /* __LP64__ */
  |      0|   50|#endif /* __GNUG__ */
  |      0|   51|#else /* ! __cplusplus */
  ------------------
  3.80k|   52|#define __DARWIN_NULL ((void *)0)
       |   53|#endif /* __cplusplus */
       |   54|
       |   55|typedef	__int64_t	__darwin_blkcnt_t;	/* total blocks */
       |   56|typedef	__int32_t	__darwin_blksize_t;	/* preferred block size */
  ------------------
  | -[OBAbstractTableViewController disableModifyInsetsForKeyboard]:
  |      0|   53|#endif /* __cplusplus */
  |      0|   54|
  |      0|   55|typedef	__int64_t	__darwin_blkcnt_t;	/* total blocks */
  |      0|   56|typedef	__int32_t	__darwin_blksize_t;	/* preferred block size */
  ------------------
       |   57|typedef __int32_t	__darwin_dev_t;		/* dev_t */
       |   58|typedef unsigned int	__darwin_fsblkcnt_t;	/* Used by statvfs and fstatvfs */
       |   59|typedef unsigned int	__darwin_fsfilcnt_t;	/* Used by statvfs and fstatvfs */
       |   60|typedef __uint32_t	__darwin_gid_t;		/* [???] process and group IDs */
       |   61|typedef __uint32_t	__darwin_id_t;		/* [XSI] pid_t, uid_t, or gid_t*/
       |   62|typedef __uint64_t	__darwin_ino64_t;	/* [???] Used for 64 bit inodes */
       |   63|#if __DARWIN_64_BIT_INO_T
       |   64|typedef __darwin_ino64_t __darwin_ino_t;	/* [???] Used for inodes */
       |   65|#else /* !__DARWIN_64_BIT_INO_T */
       |   66|typedef __uint32_t	__darwin_ino_t;		/* [???] Used for inodes */
  ------------------
  | -[OBTableViewController sectionAtIndex:]:
  |     94|   60|typedef __uint32_t	__darwin_gid_t;		/* [???] process and group IDs */
  |     94|   61|typedef __uint32_t	__darwin_id_t;		/* [XSI] pid_t, uid_t, or gid_t*/
  |     94|   62|typedef __uint64_t	__darwin_ino64_t;	/* [???] Used for 64 bit inodes */
  |     94|   63|#if __DARWIN_64_BIT_INO_T
  |      0|   64|typedef __darwin_ino64_t __darwin_ino_t;	/* [???] Used for inodes */
  |     94|   65|#else /* !__DARWIN_64_BIT_INO_T */
  |     94|   66|typedef __uint32_t	__darwin_ino_t;		/* [???] Used for inodes */
  ------------------
       |   67|#endif /* __DARWIN_64_BIT_INO_T */
       |   68|typedef __darwin_natural_t __darwin_mach_port_name_t; /* Used by mach */
       |   69|typedef __darwin_mach_port_name_t __darwin_mach_port_t; /* Used by mach */
       |   70|typedef __uint16_t	__darwin_mode_t;	/* [???] Some file attributes */
  ------------------
  | -[OBTableViewSection isEqualToSection:]:
  |     95|   59|typedef unsigned int	__darwin_fsfilcnt_t;	/* Used by statvfs and fstatvfs */
  |     95|   60|typedef __uint32_t	__darwin_gid_t;		/* [???] process and group IDs */
  |      0|   61|typedef __uint32_t	__darwin_id_t;		/* [XSI] pid_t, uid_t, or gid_t*/
  |      0|   62|typedef __uint64_t	__darwin_ino64_t;	/* [???] Used for 64 bit inodes */
  |     95|   63|#if __DARWIN_64_BIT_INO_T
  |      0|   64|typedef __darwin_ino64_t __darwin_ino_t;	/* [???] Used for inodes */
  |      0|   65|#else /* !__DARWIN_64_BIT_INO_T */
  |     95|   66|typedef __uint32_t	__darwin_ino_t;		/* [???] Used for inodes */
  |     29|   67|#endif /* __DARWIN_64_BIT_INO_T */
  |     29|   68|typedef __darwin_natural_t __darwin_mach_port_name_t; /* Used by mach */
  |     66|   69|typedef __darwin_mach_port_name_t __darwin_mach_port_t; /* Used by mach */
  |     95|   70|typedef __uint16_t	__darwin_mode_t;	/* [???] Some file attributes */
  ------------------
       |   71|typedef __int64_t	__darwin_off_t;		/* [???] Used for file sizes */
       |   72|typedef __int32_t	__darwin_pid_t;		/* [???] process and group IDs */
       |   73|typedef __uint32_t	__darwin_sigset_t;	/* [???] signal set */
       |   74|typedef __int32_t	__darwin_suseconds_t;	/* [???] microseconds */
       |   75|typedef __uint32_t	__darwin_uid_t;		/* [???] user IDs */
       |   76|typedef __uint32_t	__darwin_useconds_t;	/* [???] microseconds */
       |   77|typedef	unsigned char	__darwin_uuid_t[16];
       |   78|typedef	char	__darwin_uuid_string_t[37];
       |   79|
       |   80|#include <sys/_pthread/_pthread_types.h>
       |   81|
       |   82|#if defined(__GNUC__) && (__GNUC__ == 3 && __GNUC_MINOR__ >= 5 || __GNUC__ > 3)
       |   83|#define __offsetof(type, field) __builtin_offsetof(type, field)
       |   84|#else /* !(gcc >= 3.5) */
       |   85|#define __offsetof(type, field) ((size_t)(&((type *)0)->field))
       |   86|#endif /* (gcc >= 3.5) */
       |   87|
       |   88|
       |   89|#endif	/* _SYS__TYPES_H_ */

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/7.0.2/include/stddef.h:
       |    1|/*===---- stddef.h - Basic type definitions --------------------------------===
       |    2| *
       |    3| * Copyright (c) 2008 Eli Friedman
       |    4| *
       |    5| * Permission is hereby granted, free of charge, to any person obtaining a copy
       |    6| * of this software and associated documentation files (the "Software"), to deal
       |    7| * in the Software without restriction, including without limitation the rights
       |    8| * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
       |    9| * copies of the Software, and to permit persons to whom the Software is
       |   10| * furnished to do so, subject to the following conditions:
       |   11| *
       |   12| * The above copyright notice and this permission notice shall be included in
       |   13| * all copies or substantial portions of the Software.
       |   14| *
       |   15| * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       |   16| * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       |   17| * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
       |   18| * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
       |   19| * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
       |   20| * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
       |   21| * THE SOFTWARE.
       |   22| *
       |   23| *===-----------------------------------------------------------------------===
       |   24| */
       |   25|
       |   26|#if !defined(__STDDEF_H) || defined(__need_ptrdiff_t) ||                       \
       |   27|    defined(__need_size_t) || defined(__need_wchar_t) ||                       \
       |   28|    defined(__need_NULL) || defined(__need_wint_t)
       |   29|
       |   30|#if !defined(__need_ptrdiff_t) && !defined(__need_size_t) &&                   \
       |   31|    !defined(__need_wchar_t) && !defined(__need_NULL) &&                       \
       |   32|    !defined(__need_wint_t)
       |   33|/* Always define miscellaneous pieces when modules are available. */
       |   34|#if !__has_feature(modules)
       |   35|#define __STDDEF_H
       |   36|#endif
       |   37|#define __need_ptrdiff_t
       |   38|#define __need_size_t
       |   39|#define __need_wchar_t
       |   40|#define __need_NULL
       |   41|#define __need_STDDEF_H_misc
       |   42|/* __need_wint_t is intentionally not defined here. */
       |   43|#endif
       |   44|
       |   45|#if defined(__need_ptrdiff_t)
       |   46|#if !defined(_PTRDIFF_T) || __has_feature(modules)
       |   47|/* Always define ptrdiff_t when modules are available. */
       |   48|#if !__has_feature(modules)
       |   49|#define _PTRDIFF_T
       |   50|#endif
       |   51|typedef __PTRDIFF_TYPE__ ptrdiff_t;
       |   52|#endif
       |   53|#undef __need_ptrdiff_t
       |   54|#endif /* defined(__need_ptrdiff_t) */
       |   55|
       |   56|#if defined(__need_size_t)
       |   57|#if !defined(_SIZE_T) || __has_feature(modules)
       |   58|/* Always define size_t when modules are available. */
       |   59|#if !__has_feature(modules)
       |   60|#define _SIZE_T
       |   61|#endif
       |   62|typedef __SIZE_TYPE__ size_t;
       |   63|#endif
       |   64|#undef __need_size_t
       |   65|#endif /*defined(__need_size_t) */
       |   66|
       |   67|#if defined(__need_STDDEF_H_misc)
       |   68|/* ISO9899:2011 7.20 (C11 Annex K): Define rsize_t if __STDC_WANT_LIB_EXT1__ is
       |   69| * enabled. */
       |   70|#if (defined(__STDC_WANT_LIB_EXT1__) && __STDC_WANT_LIB_EXT1__ >= 1 && \
       |   71|     !defined(_RSIZE_T)) || __has_feature(modules)
       |   72|/* Always define rsize_t when modules are available. */
       |   73|#if !__has_feature(modules)
       |   74|#define _RSIZE_T
       |   75|#endif
       |   76|typedef __SIZE_TYPE__ rsize_t;
       |   77|#endif
       |   78|#endif /* defined(__need_STDDEF_H_misc) */
       |   79|
       |   80|#if defined(__need_wchar_t)
       |   81|#ifndef __cplusplus
       |   82|/* Always define wchar_t when modules are available. */
       |   83|#if !defined(_WCHAR_T) || __has_feature(modules)
       |   84|#if !__has_feature(modules)
       |   85|#define _WCHAR_T
       |   86|#if defined(_MSC_EXTENSIONS)
       |   87|#define _WCHAR_T_DEFINED
       |   88|#endif
       |   89|#endif
       |   90|typedef __WCHAR_TYPE__ wchar_t;
       |   91|#endif
       |   92|#endif
       |   93|#undef __need_wchar_t
       |   94|#endif /* defined(__need_wchar_t) */
       |   95|
       |   96|#if defined(__need_NULL)
       |   97|#undef NULL
       |   98|#ifdef __cplusplus
       |   99|#  if !defined(__MINGW32__) && !defined(_MSC_VER)
       |  100|#    define NULL __null
       |  101|#  else
       |  102|#    define NULL 0
       |  103|#  endif
       |  104|#else
      0|  105|#  define NULL ((void*)0)
       |  106|#endif
       |  107|#ifdef __cplusplus
       |  108|#if defined(_MSC_EXTENSIONS) && defined(_NATIVE_NULLPTR_SUPPORTED)
       |  109|namespace std { typedef decltype(nullptr) nullptr_t; }
       |  110|using ::std::nullptr_t;
       |  111|#endif
       |  112|#endif
       |  113|#undef __need_NULL
       |  114|#endif /* defined(__need_NULL) */
       |  115|
       |  116|#if defined(__need_STDDEF_H_misc)
       |  117|#if __STDC_VERSION__ >= 201112L || __cplusplus >= 201103L
       |  118|#include "__stddef_max_align_t.h"
       |  119|#endif
       |  120|#define offsetof(t, d) __builtin_offsetof(t, d)
       |  121|#undef __need_STDDEF_H_misc
       |  122|#endif  /* defined(__need_STDDEF_H_misc) */
       |  123|
       |  124|/* Some C libraries expect to see a wint_t here. Others (notably MinGW) will use
       |  125|__WINT_TYPE__ directly; accommodate both by requiring __need_wint_t */
       |  126|#if defined(__need_wint_t)
       |  127|/* Always define wint_t when modules are available. */
       |  128|#if !defined(_WINT_T) || __has_feature(modules)
       |  129|#if !__has_feature(modules)
       |  130|#define _WINT_T
       |  131|#endif
       |  132|typedef __WINT_TYPE__ wint_t;
       |  133|#endif
       |  134|#undef __need_wint_t
       |  135|#endif /* __need_wint_t */
       |  136|
       |  137|#endif

/Users/rene/workspace/openbakery/OBTableViewController/Core/Source/Binding/OBAccessoryPropertyBinding.m:
       |    1|//
       |    2|//
       |    3|// Created by Rene Pirringer.
       |    4|//
       |    5|// 
       |    6|//
       |    7|
       |    8|
       |    9|#import "OBAccessoryPropertyBinding.h"
       |   10|#import "OBProperty.h"
       |   11|
       |   12|
       |   13|@implementation OBAccessoryPropertyBinding {
       |   14|
       |   15|}
       |   16|
       |   17|
     35|   18|- (id)initSourceName:(NSString *)sourceName andDestinationName:(NSString *)destinationName {
     35|   19|	self = [super init];
     35|   20|	if (self) {
     35|   21|		self.sourceProperty = [[OBProperty alloc] initIntegerWithName:sourceName];
     35|   22|		self.destinationProperty = [[OBProperty alloc] initIntegerWithName:destinationName];
     35|   23|	}
     35|   24|	return self;
     35|   25|}
       |   26|
      6|   27|- (void)setValueFrom:(NSObject *)sourceObject to:(NSObject *)destinationObject {
      6|   28|	NSNumber* value = [self.sourceProperty valueForObject:sourceObject];
      6|   29|	[self.destinationProperty setValueForObject:destinationObject toValue:value];
      6|   30|}
       |   31|@end

/Users/rene/workspace/openbakery/OBTableViewController/Core/Source/Binding/OBModelCellBinding.m:
       |    1|//
       |    2|//
       |    3|// Created by Rene Pirringer.
       |    4|//
       |    5|// 
       |    6|//
       |    7|
       |    8|
       |    9|#import "OBModelCellBinding.h"
       |   10|#import "OBProperty.h"
       |   11|#import "OBReflection.h"
       |   12|#import "UIImageViewPropertyBinding.h"
       |   13|
       |   14|
       |   15|@interface OBModelCellBinding ()
       |   16|@property(nonatomic, strong) NSMutableArray *bindings;
       |   17|@end
       |   18|
       |   19|@implementation OBModelCellBinding {
       |   20|
       |   21|}
       |   22|
      7|   23|- (id)initWithModelClass:(Class)modelClass andCellClass:(Class)cellClass andPropertyBindings:(NSArray *)propertyBindings {
      7|   24|	self = [super init];
      7|   25|	if (self) {
      7|   26|		self.bindings = [[NSMutableArray alloc] init];
      7|   27|		[self setupBindingsForModel:modelClass andCell:cellClass andPropertyBindings:propertyBindings];
      7|   28|	}
      7|   29|	return self;
      7|   30|}
       |   31|
      7|   32|- (void)setupBindingsForModel:(Class)modelClass andCell:(Class)cellClass andPropertyBindings:(NSArray *)propertyBindings {
      7|   33|	NSArray *modelProperties = [OBReflection getPropertiesForClass:modelClass];
      7|   34|	NSArray *cellProperties = [OBReflection getPropertiesForClass:cellClass];
     46|   35|	for (OBPropertyBinding * propertyBinding in propertyBindings) {
     46|   36|		if ([modelProperties containsObject:propertyBinding.sourceProperty] &&
     28|   37|			[cellProperties containsObject:propertyBinding.destinationProperty]) {
     28|   38|			[self.bindings addObject:[propertyBinding copy]];
     28|   39|		}
     46|   40|
     46|   41|	}
      7|   42|}
       |   43|
       |   44|
      6|   45|- (void)setValuesForCell:(UITableViewCell *)cell usingModel:(NSObject *)model {
     24|   46|	for (OBPropertyBinding *binding in self.bindings) {
     24|   47|		[binding setValueFrom:model to:cell];
     24|   48|	}
      6|   49|}
       |   50|@end

/Users/rene/workspace/openbakery/OBTableViewController/Core/Source/Binding/OBPropertyBinding.m:
       |    1|//
       |    2|//
       |    3|// Created by Rene Pirringer.
       |    4|//
       |    5|// 
       |    6|//
       |    7|
       |    8|
       |    9|#import "OBPropertyBinding.h"
       |   10|#import "OBProperty.h"
       |   11|
       |   12|
       |   13|@implementation OBPropertyBinding {
       |   14|}
       |   15|
    208|   16|- (id)initSourceName:(NSString *)sourceName sourceClass:(Class)sourceClass destinationName:(NSString *)destinationName destinationClass:(Class)destinationClass {
    208|   17|	self = [super init];
    208|   18|	if (self) {
    208|   19|		if (sourceName) {
    208|   20|			self.sourceProperty = [[OBProperty alloc] initWithName:sourceName andClass:sourceClass];
    208|   21|		}
    208|   22|		self.destinationProperty = [[OBProperty alloc] initWithName:destinationName andClass:destinationClass];
    208|   23|	}
    208|   24|	return self;
    208|   25|}
       |   26|
       |   27|
      0|   28|- (void)setValueFrom:(NSObject *)sourceObject to:(NSObject *)destinationObject {
      0|   29|}
       |   30|
       |   31|
     28|   32|- (id)copyWithZone:(NSZone *)zone {
     28|   33|	OBPropertyBinding *copy = [[self class] allocWithZone:zone];
     28|   34|	if (copy) {
     28|   35|		copy.sourceProperty = self.sourceProperty;
     28|   36|		copy.destinationProperty = self.destinationProperty;
     28|   37|	}
     28|   38|	return copy;
     28|   39|}
       |   40|
       |   41|
       |   42|@end

/Users/rene/workspace/openbakery/OBTableViewController/Core/Source/Binding/UIDatePickerPropertyBinding.m:
       |    1|//
       |    2|//
       |    3|// Created by Rene Pirringer.
       |    4|//
       |    5|// 
       |    6|//
       |    7|
       |    8|#import <UIKit/UIKit.h>
       |    9|#import "UIDatePickerPropertyBinding.h"
       |   10|#import "OBProperty.h"
       |   11|
       |   12|
       |   13|@implementation UIDatePickerPropertyBinding {
       |   14|	//NSObject *_sourceObject;
       |   15|
       |   16|}
       |   17|
     34|   18|- (id)initSourceName:(NSString *)sourceName andDestinationName:(NSString *)destinationName {
     34|   19|	return [super initSourceName:sourceName sourceClass:[NSDate class] destinationName:destinationName destinationClass:[UIDatePicker class]];
     34|   20|}
       |   21|
      0|   22|- (void)setValueFrom:(NSObject *)sourceObject to:(NSObject *)destinationObject {
      0|   23|	UIDatePicker *datePicker = [self.destinationProperty valueForObject:destinationObject];
      0|   24|	NSDate *value = [self.sourceProperty valueForObject:sourceObject];
      0|   25|	datePicker.date = value;
      0|   26|
      0|   27|	/*
      0|   28|	if (!_sourceObject) {
      0|   29|		_sourceObject = sourceObject;
      0|   30|		[datePicker addTarget:self action:@selector(valueChanged:) forControlEvents:UIControlEventValueChanged];
      0|   31|	}
      0|   32|	*/
      0|   33|}
       |   34|
       |   35|/*
       |   36|- (void)valueChanged:(id)sender {
       |   37|	UIDatePicker *datePicker = (UIDatePicker *)sender;
       |   38|	[self.sourceProperty setValueForObject:_sourceObject toValue:datePicker.date];
       |   39|}
       |   40|*/
       |   41|
       |   42|
       |   43|@end

/Users/rene/workspace/openbakery/OBTableViewController/Core/Source/Binding/UIImageViewPropertyBinding.m:
       |    1|//
       |    2|//
       |    3|// Created by Rene Pirringer.
       |    4|//
       |    5|// 
       |    6|//
       |    7|
       |    8|#import <UIKit/UIKit.h>
       |    9|#import "UIImageViewPropertyBinding.h"
       |   10|#import "OBReflection.h"
       |   11|#import "OBProperty.h"
       |   12|
       |   13|
       |   14|@implementation UIImageViewPropertyBinding {
       |   15|
       |   16|}
       |   17|
       |   18|
     35|   19|- (id)initWithSourceName:(NSString *)sourceName andDestinationName:(NSString *)destinationName {
     35|   20|	return [super initSourceName:sourceName sourceClass:[UIImage class] destinationName:destinationName destinationClass:[UIImageView class]];
     35|   21|}
       |   22|
       |   23|
      6|   24|- (void)setValueFrom:(NSObject *)sourceObject to:(NSObject *)destinationObject {
      6|   25|	NSObject *object = [self.destinationProperty valueForObject:destinationObject];
      6|   26|	if ([object isKindOfClass:[UIImageView class]]) {
      6|   27|		NSObject *value = [self.sourceProperty valueForObject:sourceObject];
      6|   28|		if ([value isKindOfClass:[UIImage class]]) {
      0|   29|			UIImageView *imageView = (UIImageView *)object;
      0|   30|			imageView.image = (UIImage *)value;
      0|   31|		}
      6|   32|	}
      6|   33|}
       |   34|
       |   35|@end

/Users/rene/workspace/openbakery/OBTableViewController/Core/Source/Binding/UILabelPropertyBinding.m:
       |    1|//
       |    2|//
       |    3|// Created by Rene Pirringer.
       |    4|//
       |    5|// 
       |    6|//
       |    7|
       |    8|#import <UIKit/UIKit.h>
       |    9|#import "UILabelPropertyBinding.h"
       |   10|#import "OBProperty.h"
       |   11|#import "OBReflection.h"
       |   12|
       |   13|
       |   14|@implementation UILabelPropertyBinding {
       |   15|
       |   16|}
       |   17|
    104|   18|- (id)initWithSourceName:(NSString *)sourceName andDestinationName:(NSString *)destinationName {
    104|   19|	return [super initSourceName:sourceName sourceClass:[NSString class] destinationName:destinationName destinationClass:[UILabel class]];
    104|   20|}
       |   21|
       |   22|
     12|   23|- (void)setValueFrom:(NSObject *)sourceObject to:(NSObject *)destinationObject {
     12|   24|	UILabel *label = [self.destinationProperty valueForObject:destinationObject];
     12|   25|	NSString *value = [self.sourceProperty valueForObject:sourceObject];
     12|   26|	label.text  = value;
     12|   27|}
       |   28|
       |   29|@end

/Users/rene/workspace/openbakery/OBTableViewController/Core/Source/Binding/UILabelToDatePropertyBinding.m:
       |    1|//
       |    2|//
       |    3|// Created by Rene Pirringer.
       |    4|//
       |    5|// 
       |    6|//
       |    7|
       |    8|#import <Foundation/Foundation.h>
       |    9|#import <UIKit/UIKit.h>
       |   10|
       |   11|#import "UILabelToDatePropertyBinding.h"
       |   12|#import "OBProperty.h"
       |   13|
       |   14|
       |   15|@implementation UILabelToDatePropertyBinding {
       |   16|	NSDateFormatter *_dateFormatter;
       |   17|}
       |   18|
     34|   19|- (id)initSourceName:(NSString *)sourceName andDestinationName:(NSString *)destinationName {
     34|   20|	self = [super initSourceName:sourceName sourceClass:[NSDate class] destinationName:destinationName destinationClass:[UILabel class]];
     34|   21|	if (self) {
     34|   22|		_dateFormatter = [[NSDateFormatter alloc] init];
     34|   23|		[_dateFormatter setDateStyle:NSDateFormatterMediumStyle];
     34|   24|		[_dateFormatter setTimeStyle:NSDateFormatterNoStyle];
     34|   25|
     34|   26|	}
     34|   27|	return self;
     34|   28|}
       |   29|
       |   30|
      0|   31|- (void)setValueFrom:(NSObject *)sourceObject to:(NSObject *)destinationObject {
      0|   32|	UILabel *label = [self.destinationProperty valueForObject:destinationObject];
      0|   33|	NSDate *value = [self.sourceProperty valueForObject:sourceObject];
      0|   34|	label.text  = [_dateFormatter stringFromDate:value];
      0|   35|}
       |   36|
      0|   37|- (id)copyWithZone:(NSZone *)zone {
      0|   38|	UILabelToDatePropertyBinding *copy = [super copyWithZone:zone];
      0|   39|
      0|   40|	if (copy != nil) {
      0|   41|		copy->_dateFormatter = _dateFormatter;
      0|   42|	}
      0|   43|
      0|   44|	return copy;
      0|   45|}
       |   46|
       |   47|@end

/Users/rene/workspace/openbakery/OBTableViewController/Core/Source/Model/UITableViewCellModel.m:
       |    1|//
       |    2|//
       |    3|// Created by René Pirringer
       |    4|
       |    5|//
       |    6|// 
       |    7|//
       |    8|
       |    9|
       |   10|#import "UITableViewCellModel.h"
       |   11|
       |   12|
       |   13|@implementation UITableViewCellModel {
       |   14|
       |   15|}
       |   16|
      0|   17|- (NSString *)description {
      0|   18|	NSMutableString *description = [NSMutableString stringWithFormat:@"<%@: ", NSStringFromClass([self class])];
      0|   19|	[description appendFormat:@"self.text=%@", self.text];
      0|   20|	[description appendString:@">"];
      0|   21|	return description;
      0|   22|}
       |   23|
       |   24|
       |   25|@end

/Users/rene/workspace/openbakery/OBTableViewController/Core/Source/OBAbstractTableViewController.m:
       |    1|//
       |    2|//
       |    3|// Created by Rene Pirringer.
       |    4|//
       |    5|// 
       |    6|//
       |    7|
       |    8|
       |    9|#import <OBInjector/OBInjector.h>
       |   10|#import "OBTableViewController.h"
       |   11|#import "OBModelCellBinding.h"
       |   12|#import "UILabelPropertyBinding.h"
       |   13|#import "UIImageViewPropertyBinding.h"
       |   14|#import "UILabelToDatePropertyBinding.h"
       |   15|#import "UIDatePickerPropertyBinding.h"
       |   16|#import "OBAccessoryPropertyBinding.h"
       |   17|
       |   18|@interface OBAbstractTableViewController ()
       |   19|@property(nonatomic) UIEdgeInsets defaultTableInset;
       |   20|@end
       |   21|
       |   22|@implementation OBAbstractTableViewController {
       |   23|	NSMutableDictionary *_cellHeightForModelClass;
       |   24|	NSMutableArray *_propertyBindings;
       |   25|	NSObject *_selectedModel;
       |   26|}
       |   27|
       |   28|
     34|   29|- (id)init {
     34|   30|	self = [super init];
     34|   31|	if (self) {
     34|   32|		self.dynamicCellHeight = NO;
     34|   33|		_modelCellBindings = [[NSMutableDictionary alloc] init];
     34|   34|		_propertyBindings = [[NSMutableArray alloc] init];
     34|   35|		[self setupBinding];
     34|   36|		self.defaultTableInset = UIEdgeInsetsZero;
     34|   37|	}
     34|   38|	return self;
     34|   39|}
       |   40|
      0|   41|- (void)dealloc {
      0|   42|	[self disableModifyInsetsForKeyboard];
      0|   43|	_tableView.dataSource = nil;
      0|   44|	_tableView.delegate = nil;
      0|   45|
      0|   46|}
       |   47|
      0|   48|- (void)enableModifyInsetsForKeyboard {
      0|   49|	[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardDidShow:) name:UIKeyboardDidShowNotification object:nil];
      0|   50|	[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillHide:) name:UIKeyboardWillHideNotification object:nil];
      0|   51|}
       |   52|
      0|   53|- (void)disableModifyInsetsForKeyboard {
      0|   54|	[[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardWillShowNotification object:nil];
      0|   55|	[[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardWillHideNotification object:nil];
      0|   56|}
       |   57|
     34|   58|- (void)setupBinding {
     34|   59|	[self addPropertyBinding:[[UILabelPropertyBinding alloc] initWithSourceName:@"text" andDestinationName:@"textLabel"]];
     34|   60|	[self addPropertyBinding:[[UILabelPropertyBinding alloc] initWithSourceName:@"detailText" andDestinationName:@"detailTextLabel"]];
     34|   61|	[self addPropertyBinding:[[UIImageViewPropertyBinding alloc] initWithSourceName:@"image" andDestinationName:@"imageView"]];
     34|   62|	[self addPropertyBinding:[[UILabelToDatePropertyBinding alloc] initSourceName:@"date" andDestinationName:@"detailTextLabel"]];
     34|   63|	[self addPropertyBinding:[[UIDatePickerPropertyBinding alloc] initSourceName:@"date" andDestinationName:@"datePicker"]];
     34|   64|	[self addPropertyBinding:[[OBAccessoryPropertyBinding alloc] initSourceName:@"accessoryType" andDestinationName:@"accessoryType"]];
     34|   65|	[self addPropertyBinding:[[UILabelPropertyBinding alloc] initWithSourceName:@"title" andDestinationName:@"titleLabel"]];
     34|   66|
     34|   67|}
       |   68|
      0|   69|- (void) removeAllPropertyBindings {
      0|   70|	_propertyBindings = [[NSMutableArray alloc] init];
      0|   71|}
       |   72|
    238|   73|- (void) addPropertyBinding:(OBPropertyBinding *)binding {
    238|   74|	[_propertyBindings addObject:binding];
    238|   75|}
       |   76|
       |   77|
       |   78|
     34|   79|- (void)setTableView:(UITableView *)tableView {
     34|   80|	_tableView = tableView;
     34|   81|	_tableView.dataSource = self;
     34|   82|	_tableView.delegate = self;
     34|   83|
     34|   84|	if (floor(NSFoundationVersionNumber) > NSFoundationVersionNumber_iOS_6_1) {
     34|   85|		_tableView.estimatedRowHeight = 44.0;
     34|   86|		_tableView.rowHeight = UITableViewAutomaticDimension;
     34|   87|	}
     34|   88|
     34|   89|}
       |   90|
      2|   91|- (void)registerIdentifier:(NSString *)identifier modelClass:(Class)modelClass {
      2|   92|	if (!_registeredIdentifiers) {
      2|   93|		_registeredIdentifiers = [[NSMutableDictionary alloc] init];
      2|   94|	}
      2|   95|	[_registeredIdentifiers setObject:identifier forKey:[self identifierForClass:modelClass]];
      2|   96|}
       |   97|
      0|   98|- (void)registerTableViewCellClass:(Class)tableViewCellClass modelClass:(Class)modelClass {
      0|   99|	NSString *identifier = [self identifierForClass:tableViewCellClass];
      0|  100|	[self registerIdentifier:identifier modelClass:modelClass];
      0|  101|	[self.tableView registerClass:tableViewCellClass forCellReuseIdentifier:identifier];
      0|  102|}
       |  103|
      6|  104|- (OBModelCellBinding *)bindingForModel:(NSObject *)model andCell:(UITableViewCell *)cell {
      6|  105|
      6|  106|	Class modelClass = [model class];
      6|  107|	OBModelCellBinding *binding = [_modelCellBindings objectForKey:[self identifierForClass:modelClass]];
      6|  108|	if (!binding) {
      6|  109|		binding = [[OBModelCellBinding alloc] initWithModelClass:modelClass andCellClass:[cell class] andPropertyBindings:_propertyBindings];
      6|  110|		[_modelCellBindings setObject:binding forKey:[self identifierForClass:modelClass]];
      6|  111|	}
      6|  112|	return binding;
      6|  113|}
       |  114|
       |  115|
       |  116|
       |  117|
      2|  118|- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
      2|  119|	NSArray *models = [self modelsForSectionIndex:section];
      2|  120|	return [models count];
      2|  121|}
       |  122|
      6|  123|- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
      6|  124|	NSObject *model = [self modelAtIndexPath:indexPath];
      6|  125|	if (!model) {
      0|  126|		//NSLog(@"No model found at indexPath[row=%d, section=%d] so return an empty cell", (int)indexPath.row, (int)indexPath.section);
      0|  127|		return [[UITableViewCell alloc] init];
      0|  128|	}
      6|  129|
      6|  130|	UITableViewCell *cell;
      6|  131|	NSString *identifier = [_registeredIdentifiers objectForKey:[self identifierForObject:model]];
      6|  132|	if (identifier) {
      1|  133|		cell = [tableView dequeueReusableCellWithIdentifier:identifier];
      5|  134|	} else {
      5|  135|		//NSLog(@"No identifier is registered for model class '%@', so using UITableViewCell", [model class]);
      5|  136|	}
      6|  137|
      6|  138|	if (!cell) {
      5|  139|		//NSLog(@"Using UITableViewCell");
      5|  140|		cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:nil];
      5|  141|	}
      6|  142|	[OBInjectorController injectDependenciesTo:cell];
      6|  143|	[cell setNeedsUpdateConstraints];
      6|  144|
      6|  145|
      6|  146|
      6|  147|	OBModelCellBinding *binding = [self bindingForModel:model andCell:cell];
      6|  148|	[binding setValuesForCell:cell usingModel:model];
      6|  149|
      6|  150|
      6|  151|	if (self.selectionMode == OBTableViewControllerSelectionSingleCheck) {
      2|  152|		if ([model isEqual:_selectedModel]) {
      1|  153|			cell.accessoryType = UITableViewCellAccessoryCheckmark;
      1|  154|		}
      1|  155|		else {
      1|  156|			cell.accessoryType = UITableViewCellAccessoryNone;
      1|  157|		}
      2|  158|	}
      6|  159|	return cell;
      6|  160|}
       |  161|
       |  162|
      1|  163|- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath {
      1|  164|	NSObject *model = [self modelAtIndexPath:indexPath];
      1|  165|	if ([self.delegate respondsToSelector:@selector(tableViewController:willDisplayCell:withModel:)]) {
      1|  166|		[self.delegate tableViewController:self willDisplayCell:cell withModel:model];
      1|  167|	}
      1|  168|	if (self.selectionMode == OBTableViewControllerSelectionSingleSelection) {
      1|  169|		cell.selected = [model isEqual:_selectedModel];
      1|  170|	}
      1|  171|
      1|  172|}
       |  173|
       |  174|
      8|  175|- (id) modelAtIndexPath:(NSIndexPath *)indexPath {
      8|  176|	NSArray *models = [self modelsForSectionIndex:indexPath.section];
      8|  177|	if (models && [models count] > indexPath.row) {
      8|  178|		return [models objectAtIndex:indexPath.row];
      8|  179|	}
      0|  180|	return nil;
      8|  181|}
       |  182|
       |  183|
      5|  184|- (CGFloat)tableView:(UITableView *)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath *)indexPath {
      5|  185|	if (self.dynamicCellHeight) {
      0|  186|		if (floor(NSFoundationVersionNumber) > NSFoundationVersionNumber_iOS_7_1) {
      0|  187|			return UITableViewAutomaticDimension;
      0|  188|		}
      0|  189|	}
      5|  190|	NSObject *model = [self modelAtIndexPath:indexPath];
      5|  191|	if (model) {
      5|  192|		return [self heightForRowWithModel:model];
      5|  193|	}
      0|  194|	return 44.0;
      5|  195|}
       |  196|
       |  197|
      0|  198|- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath {
      0|  199|	if (self.dynamicCellHeight) {
      0|  200|		if (floor(NSFoundationVersionNumber) > NSFoundationVersionNumber_iOS_7_1) {
      0|  201|			return UITableViewAutomaticDimension;
      0|  202|		}
      0|  203|	}
      0|  204|
      0|  205|	NSObject *model = [self modelAtIndexPath:indexPath];
      0|  206|	if (model) {
      0|  207|		return [self heightForRowWithModel:model];
      0|  208|	}
      0|  209|	return 44.0f;
      0|  210|
      0|  211|}
       |  212|
      5|  213|- (CGFloat)heightForRowWithModel:(NSObject *)model {
      5|  214|	NSString *className = [self identifierForObject:model];
      5|  215|
      5|  216|	if (!_cellHeightForModelClass) {
      3|  217|		// lazy initialize heights
      3|  218|		_cellHeightForModelClass = [[NSMutableDictionary alloc] init];
      3|  219|
      0|  220|		[_registeredIdentifiers enumerateKeysAndObjectsUsingBlock:^(NSString *className, NSString *identifier, BOOL *stop) {
      0|  221|			UITableViewCell *cell = [self.tableView dequeueReusableCellWithIdentifier:identifier];
      0|  222|
      0|  223|		  CGFloat height = cell.frame.size.height;
      0|  224|		  if (height == 0) {
      0|  225|				height = 44.0f;
      0|  226|		  }
      0|  227|		  [_cellHeightForModelClass setObject:@(height) forKey:className];
      0|  228|		}];
      3|  229|
      3|  230|
      3|  231|	}
      5|  232|	NSNumber *value = (NSNumber *)[_cellHeightForModelClass objectForKey:className];
      5|  233|	if (value) {
      0|  234|		return [value floatValue];
      0|  235|	}
      5|  236|	return 44.0f;
      5|  237|}
       |  238|
       |  239|
      9|  240|- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
      9|  241|
      9|  242|	NSObject *model = [self modelAtIndexPath:indexPath];
      9|  243|
      9|  244|	[tableView deselectRowAtIndexPath:indexPath animated:YES];
      9|  245|	switch (self.selectionMode) {
      0|  246|		case OBTableViewControllerSelectionModeNone:
      0|  247|			break;
      1|  248|		case OBTableViewControllerSelectionSingleSelection: {
      1|  249|			BOOL shouldSelect = YES;
      1|  250|			if ([self.delegate respondsToSelector:@selector(shouldSelectModel:)]) {
      1|  251|				shouldSelect = [self.delegate shouldSelectModel:model];
      1|  252|			}
      1|  253|			if (shouldSelect) {
      0|  254|				[self setSelectedModel:model];
      0|  255|			}
      1|  256|			break;
      0|  257|		}
      8|  258|		case OBTableViewControllerSelectionSingleCheck: {
      8|  259|			if (model == _selectedModel) {
      2|  260|				BOOL shouldDeselect = YES;
      2|  261|				if ([self.delegate respondsToSelector:@selector(shouldDeselectModel:)]) {
      1|  262|					shouldDeselect = [self.delegate shouldDeselectModel:_selectedModel];
      1|  263|				}
      2|  264|				if (shouldDeselect) {
      1|  265|					_selectedModel = nil;
      1|  266|					[self.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationNone];
      1|  267|				}
      2|  268|			}
      6|  269|			else {
      6|  270|				BOOL shouldSelect = YES;
      6|  271|				if ([self.delegate respondsToSelector:@selector(shouldSelectModel:)]) {
      2|  272|					shouldSelect = [self.delegate shouldSelectModel:model];
      2|  273|				}
      6|  274|				if (shouldSelect) {
      5|  275|					[self setSelectedModel:model];
      5|  276|
      5|  277|				}
      6|  278|			}
      8|  279|			break;
      0|  280|		}
      9|  281|
      9|  282|	}
      9|  283|
      9|  284|	if ([self.delegate respondsToSelector:@selector(didSelectModel:)]) {
      4|  285|		[self.delegate didSelectModel:model];
      4|  286|	}
      9|  287|
      9|  288|}
       |  289|
       |  290|
      0|  291|- (void)tableView:(UITableView *)tableView accessoryButtonTappedForRowWithIndexPath:(NSIndexPath *)indexPath {
      0|  292|	NSObject *model = [self modelAtIndexPath:indexPath];
      0|  293|	if ([self.delegate respondsToSelector:@selector(tableViewController:didSelectAccessoryForModel:)]) {
      0|  294|		[self.delegate tableViewController:self didSelectAccessoryForModel:model];
      0|  295|	}
      0|  296|
      0|  297|}
       |  298|
       |  299|
      0|  300|- (NSIndexPath *)indexPathForModel:(id)object {
      0|  301|	return nil;
      0|  302|}
       |  303|
       |  304|
      5|  305|- (void)setSelectedModel:(id)model {
      5|  306|	if ([model isEqual:_selectedModel]) {
      0|  307|		// already selected
      0|  308|		return;
      0|  309|	}
      5|  310|	NSMutableArray *indicesToUpdate = [[NSMutableArray alloc] init];
      5|  311|	NSIndexPath *oldIndexPath = [self indexPathForModel:_selectedModel];
      5|  312|	if (oldIndexPath) {
      1|  313|		[indicesToUpdate addObject:oldIndexPath];
      1|  314|	}
      5|  315|	NSIndexPath *newIndexPath = [self indexPathForModel:model];
      5|  316|	if (newIndexPath) {
      5|  317|		[indicesToUpdate addObject:newIndexPath];
      5|  318|		_selectedModel = model;
      0|  319|	} else {
      0|  320|		_selectedModel = nil; // model not found
      0|  321|	}
      5|  322|
      5|  323|	if ([indicesToUpdate count]) {
      5|  324|		[self.tableView reloadRowsAtIndexPaths:indicesToUpdate withRowAnimation:UITableViewRowAnimationNone];
      5|  325|	}
      5|  326|}
       |  327|
       |  328|
      0|  329|- (id)modelForCell:(id)cell {
      0|  330|	NSIndexPath *indexPath = [self.tableView indexPathForCell:cell];
      0|  331|	if (indexPath) {
      0|  332|		return [self modelAtIndexPath:indexPath];
      0|  333|	}
      0|  334|	return nil;
      0|  335|}
       |  336|
      0|  337|- (UITableViewCell *)cellForModel:(id)model {
      0|  338|	NSIndexPath *indexPath = [self indexPathForModel:model];
      0|  339|	return [self.tableView cellForRowAtIndexPath:indexPath];
      0|  340|}
       |  341|
       |  342|
       |  343|#pragma mark - Methods to override
       |  344|
       |  345|/**
       |  346|* Must be overriden
       |  347|*/
      0|  348|- (NSArray *)modelsForSectionIndex:(NSInteger )section {
      0|  349|	return nil;
      0|  350|}
       |  351|
      3|  352|- (NSArray *)selectedModels {
      3|  353|	if (_selectedModel) {
      2|  354|		return @[_selectedModel];
      2|  355|	}
      1|  356|	return [NSArray array];
      3|  357|}
       |  358|
       |  359|
      0|  360|- (void)scrollToModel:(NSObject *)model {
      0|  361|	NSIndexPath *indexPath = [self indexPathForModel:model];
      0|  362|	if (indexPath) {
      0|  363|		[self.tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionTop animated:YES];
      0|  364|	}
      0|  365|
      0|  366|}
       |  367|
       |  368|
      0|  369|- (void)deselectAll {
      0|  370|	_selectedModel = nil;
      0|  371|	NSIndexPath *indexPath = [self.tableView indexPathForSelectedRow];
      0|  372|	if (indexPath) {
      0|  373|		[self.tableView deselectRowAtIndexPath:indexPath animated:NO];
      0|  374|	}
      0|  375|}
       |  376|
     11|  377|- (NSString *)identifierForObject:(NSObject *)object {
     11|  378|	return [self identifierForClass:[object class]];
     11|  379|}
       |  380|
       |  381|
     25|  382|- (NSString *)identifierForClass:(Class) clazz {
     25|  383|	if ([clazz isKindOfClass:[NSString class]]) {
      0|  384|		return @"NSString";
      0|  385|	}
     25|  386|	NSString *result = NSStringFromClass(clazz);;
     25|  387|	if ([result isEqualToString:@"__NSCFConstantString"] || [result isEqualToString:@"__NSCFString"]) {
      2|  388|		return @"NSString";
      2|  389|	}
     23|  390|	return result;
     25|  391|}
       |  392|
       |  393|
      0|  394|- (void)keyboardDidShow:(NSNotification *)notification {
      0|  395|	NSDictionary *keyInfo = [notification userInfo];
      0|  396|	CGRect keyboardFrame = [[keyInfo objectForKey:@"UIKeyboardFrameEndUserInfoKey"] CGRectValue];
      0|  397|	keyboardFrame = [self.tableView convertRect:keyboardFrame fromView:nil];
      0|  398|	CGRect intersect = CGRectIntersection(keyboardFrame, self.tableView.bounds);
      0|  399|	if (!CGRectIsNull(intersect)) {
      0|  400|		NSTimeInterval duration = [[keyInfo objectForKey:@"UIKeyboardAnimationDurationUserInfoKey"] doubleValue];
      0|  401|		if (UIEdgeInsetsEqualToEdgeInsets(self.defaultTableInset,UIEdgeInsetsZero)) {
      0|  402|			self.defaultTableInset = self.tableView.contentInset;
      0|  403|		}
      0|  404|		__weak OBAbstractTableViewController *weakSelf = self;
      0|  405|		[UIView animateWithDuration:duration animations:^{
      0|  406|				weakSelf.tableView.contentInset = UIEdgeInsetsMake(weakSelf.defaultTableInset.top, weakSelf.defaultTableInset.left, weakSelf.defaultTableInset.bottom+intersect.size.height, weakSelf.defaultTableInset.right);
      0|  407|				weakSelf.tableView.scrollIndicatorInsets = self.tableView.contentInset;
      0|  408|		}];
      0|  409|	}
      0|  410|}
       |  411|
      0|  412|- (void)keyboardWillHide:(NSNotification *)notification {
      0|  413|	NSDictionary *keyInfo = [notification userInfo];
      0|  414|	NSTimeInterval duration = [[keyInfo objectForKey:@"UIKeyboardAnimationDurationUserInfoKey"] doubleValue];
      0|  415|	[UIView animateWithDuration:duration animations:^{
      0|  416|			self.tableView.contentInset = self.defaultTableInset;
      0|  417|			self.tableView.scrollIndicatorInsets = self.defaultTableInset;
      0|  418|	}];
      0|  419|}
       |  420|@end

/Users/rene/workspace/openbakery/OBTableViewController/Core/Source/OBReflection/OBProperty.m:
       |    1|//
       |    2|//
       |    3|//
       |    4|// Created by Rene Pirringer
       |    5|//
       |    6|// 
       |    7|//
       |    8|
       |    9|
       |   10|#import "OBProperty.h"
       |   11|
       |   12|
       |   13|
       |   14|@implementation OBProperty {
       |   15|
       |   16|	BOOL _isPrimitive;
       |   17|	NSString *_typeName;
       |   18|	NSString *_name;
       |   19|}
       |   20|
     70|   21|- (id)initWithName:(NSString *)name andTypeName:(NSString *)typeName {
     70|   22|	self = [super init];
     70|   23|	if (self) {
     70|   24|		_isPrimitive = YES;
     70|   25|		_name = name;
     70|   26|		_typeName = typeName;
     70|   27|
     70|   28|	}
     70|   29|	return self;
     70|   30|}
       |   31|
       |   32|
       |   33|
       |   34|
     70|   35|- (id)initIntegerWithName:(NSString *)name {
     70|   36|	char *intChar = @encode(NSInteger);
     70|   37|	return [self initWithName:name andTypeName:[NSString stringWithFormat:@"%c" , *intChar]];
     70|   38|}
       |   39|
       |   40|
      0|   41|- (id)initFloatWithName:(NSString *)name {
      0|   42|	return [self initWithName:name andTypeName:@"f"];
      0|   43|}
       |   44|
      0|   45|- (id)initLongWithName:(NSString *)name {
      0|   46|	return [self initWithName:name andTypeName:@"l"];
      0|   47|}
       |   48|
      0|   49|- (id)initShortWithName:(NSString *)name {
      0|   50|	return [self initWithName:name andTypeName:@"s"];
      0|   51|}
       |   52|
      0|   53|- (id)initBoolWithName:(NSString *)name {
      0|   54|#if __LP64__
       |   55|	return [self initWithName:name andTypeName:@"B"];
       |   56|#else
      0|   57|	return [self initWithName:name andTypeName:@"c"];
      0|   58|#endif
      0|   59|}
       |   60|
  1.09k|   61|- (id)initWithName:(NSString *)name andTypeString:(NSString *)typeString {
  1.09k|   62|	self = [super init];
  1.09k|   63|	if (self) {
  1.09k|   64|		_isPrimitive = YES;
  1.09k|   65|		_name = name;
  1.09k|   66|		[self parseTypeString:typeString];
  1.09k|   67|
  1.09k|   68|	}
  1.09k|   69|	return self;
  1.09k|   70|}
       |   71|
    416|   72|- (id)initWithName:(NSString *)name andClass:(Class)clazz {
    416|   73|	self = [super init];
    416|   74|		if (self) {
    416|   75|			_isPrimitive = NO;
    416|   76|			_name = name;
    416|   77|			_typeName = NSStringFromClass(clazz);
    416|   78|		}
    416|   79|		return self;
    416|   80|}
       |   81|
       |   82|
  1.09k|   83|- (void)parseTypeString:(NSString *)typeString {
  1.09k|   84|
  1.09k|   85|	NSArray *tokens = [typeString componentsSeparatedByString:@","];
  1.09k|   86|
  3.53k|   87|	for (NSString *token in tokens) {
  3.53k|   88|
  3.53k|   89|		if ([token hasPrefix:@"T@"]) {
    602|   90|			_isPrimitive = NO;
    602|   91|			if (token.length > 3) {
    595|   92|				_typeName = [token substringWithRange:NSMakeRange(3, token.length-4)];
    595|   93|			}
  2.93k|   94|		} else if ([token hasPrefix:@"T"]) {
    497|   95|			_typeName = [token substringFromIndex:1];
    497|   96|		}
  3.53k|   97|	}
  1.09k|   98|
  1.09k|   99|
  1.09k|  100|}
       |  101|
       |  102|
  7.39k|  103|- (BOOL)isPrimitive {
  7.39k|  104|	return _isPrimitive;
  7.39k|  105|}
       |  106|
  8.02k|  107|- (NSString *)typeName {
  8.02k|  108|	return _typeName;
  8.02k|  109|}
       |  110|
    552|  111|- (NSString *)name {
    552|  112|	return _name;
    552|  113|}
       |  114|
      0|  115|- (NSString *)description {
      0|  116|	NSMutableString *description = [NSMutableString stringWithFormat:@"<%@: ", NSStringFromClass([self class])];
      0|  117|
      0|  118|	[description appendString:@" name="];
      0|  119|	[description appendString:_name];
      0|  120|	[description appendString:@" typeName="];
      0|  121|	[description appendString:_typeName];
      0|  122|
      0|  123|	[description appendString:@">"];
      0|  124|	return description;
      0|  125|}
       |  126|
     44|  127|- (id)valueForObject:(NSObject *)object {
     44|  128|	return [object valueForKey:_name];
     44|  129|}
       |  130|
      6|  131|- (void)setValueForObject:(NSObject *)object toValue:(NSObject *)value {
      6|  132|	[object setValue:value forKey:_name];
      6|  133|}
       |  134|
       |  135|
  3.69k|  136|- (BOOL)isEqual:(id)other {
  3.69k|  137|	if (other == self) {
      0|  138|			return YES;
      0|  139|	}
  3.69k|  140|	if (!other || ![[other class] isEqual:[self class]]) {
      0|  141|			return NO;
      0|  142|	}
  3.69k|  143|
  3.69k|  144|	return [self isEqualToProperty:other];
  3.69k|  145|}
       |  146|
  3.69k|  147|- (BOOL)isEqualToProperty:(OBProperty *)property {
  3.69k|  148|	if (self == property) {
      0|  149|			return YES;
      0|  150|	}
  3.69k|  151|	if (property == nil) {
      0|  152|			return NO;
      0|  153|	}
  3.69k|  154|	if (self.isPrimitive != property.isPrimitive) {
  1.68k|  155|			return NO;
  1.68k|  156|	}
  2.00k|  157|	if (self.typeName != property.typeName && ![self.typeName isEqualToString:property.typeName]) {
  1.86k|  158|			return NO;
  1.86k|  159|	}
    138|  160|	if (self.name != property.name && ![self.name isEqualToString:property.name]) {
     82|  161|			return NO;
     82|  162|	}
     56|  163|	return YES;
    138|  164|}
       |  165|
      0|  166|- (NSUInteger)hash {
      0|  167|	NSUInteger hash = (NSUInteger) self.isPrimitive;
      0|  168|	hash = hash * 31u + [self.typeName hash];
      0|  169|	hash = hash * 31u + [self.name hash];
      0|  170|	return hash;
      0|  171|}
       |  172|
       |  173|
       |  174|@end

/Users/rene/workspace/openbakery/OBTableViewController/Core/Source/OBReflection/OBReflection.m:
       |    1|//
       |    2|//
       |    3|//
       |    4|// Created by Rene Pirringer
       |    5|// 
       |    6|//
       |    7|
       |    8|
       |    9|#import <objc/runtime.h>
       |   10|#import "OBReflection.h"
       |   11|#import "OBProperty.h"
       |   12|
       |   13|
       |   14|@implementation OBReflection {
       |   15|
       |   16|}
       |   17|
  1.09k|   18|+ (OBProperty *)propertyForProperty:(objc_property_t)property {
  1.09k|   19|	const char *type = property_getAttributes(property);
  1.09k|   20|	NSString *typeString = [NSString stringWithUTF8String:type];
  1.09k|   21|
  1.09k|   22|	const char *propertyName = property_getName(property);
  1.09k|   23|	NSString *propertyNameString = [NSString stringWithUTF8String:propertyName];
  1.09k|   24|
  1.09k|   25|	//NSLog(@"property name: %@", propertyNameString);
  1.09k|   26|	//NSLog(@"property type: %@", typeString);
  1.09k|   27|	return [[OBProperty alloc] initWithName:propertyNameString andTypeString:typeString];
  1.09k|   28|}
       |   29|
       |   30|
     29|   31|+ (NSArray *)getPropertiesForClass:(Class)clazz {
     29|   32|
     29|   33|	NSMutableArray *result = [[NSMutableArray alloc] init];
     29|   34|	unsigned int count = 0;
     29|   35|
     29|   36|	// add properties from all superclasses
     29|   37|	Class superClass = class_getSuperclass(clazz);
     29|   38|	if (superClass && ![superClass isEqual:[NSObject class]]) {
     15|   39|		[result addObjectsFromArray:[self getPropertiesForClass:superClass]];
     15|   40|	}
     29|   41|
     29|   42|	objc_property_t* properties = class_copyPropertyList(clazz, &count);
     29|   43|	objc_property_t* propertiesIterator = properties;
  1.12k|   44|	for (int i=0; i<count; i++) {
  1.09k|   45|		[result addObject:[self propertyForProperty:*propertiesIterator]];
  1.09k|   46|		propertiesIterator++;
  1.09k|   47|	}
     29|   48|	free(properties);
     29|   49|	return result;
     29|   50|}
       |   51|
       |   52|
      0|   53|+ (OBProperty *)propertyWithName:(NSString*)name forClass:(Class)clazz {
      0|   54|	objc_property_t property = class_getProperty(clazz, [name UTF8String]);
      0|   55|	return [self propertyForProperty:property];
      0|   56|}
       |   57|
       |   58|@end

/Users/rene/workspace/openbakery/OBTableViewController/Core/Source/OBTableViewController.m:
       |    1|//
       |    2|//
       |    3|// Created by Rene Pirringer.
       |    4|//
       |    5|// 
       |    6|//
       |    7|
       |    8|
       |    9|#import "OBTableViewController.h"
       |   10|#import "OBTableViewSection.h"
       |   11|
       |   12|@interface OBTableViewSection()
       |   13|@property (nonatomic, assign) NSInteger identifier;
       |   14|@end;
       |   15|
       |   16|
       |   17|
       |   18|@implementation OBTableViewController {
       |   19|	NSMutableDictionary *_modelDictionary;
       |   20|	NSMutableArray *_sections;
       |   21|
       |   22|}
       |   23|
     24|   24|- (id)init {
     24|   25|	self = [super init];
     24|   26|	if (self) {
     24|   27|		_sections = [[NSMutableArray alloc] init];
     24|   28|		_modelDictionary = [[NSMutableDictionary alloc] init];
     24|   29|	}
     24|   30|
     24|   31|	return self;
     24|   32|}
       |   33|
       |   34|
     32|   35|- (void)addSection:(OBTableViewSection *)section {
     32|   36|	if ([_sections containsObject:section]) {
      0|   37|		return;
      0|   38|	}
     32|   39|	section.identifier = [_sections count] + 1;
     32|   40|	[_sections addObject:section];
     32|   41|}
       |   42|
      0|   43|- (NSArray *)sections {
      0|   44|	return [NSArray arrayWithArray:_sections];
      0|   45|}
       |   46|
      0|   47|- (NSInteger)indexForSection:(OBTableViewSection *)section {
      0|   48|	return section.identifier-1;
      0|   49|}
       |   50|
       |   51|
     23|   52|- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)sectionIndex {
     23|   53|	OBTableViewSection *section = [self sectionAtIndex:sectionIndex];
     23|   54|	NSArray *models = [self modelsForSection:section];
     23|   55|	//NSLog(@"number rows in section %@: %@", [@(sectionIndex) stringValue], [@([models count]) stringValue]);
     23|   56|	return [models count];
     23|   57|
     23|   58|}
       |   59|
     94|   60|- (OBTableViewSection *)sectionAtIndex:(NSInteger)section {
     94|   61|	if (section < [_sections count]) {
     94|   62|		return [_sections objectAtIndex:section];
     94|   63|	}
      0|   64|	return nil;
     94|   65|
     94|   66|}
       |   67|
       |   68|
     13|   69|- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
     13|   70|	return [_sections count];
     13|   71|
     13|   72|}
       |   73|
       |   74|
     15|   75|- (void)addModel:(NSObject *)model toSection:(OBTableViewSection *)section {
     15|   76|	//NSLog(@"addModel:%@ toSection:%@", model, section);
     15|   77|	NSMutableArray *models = [self modelsArrayForSection:section];
     15|   78|	[models addObject:model];
     15|   79|}
       |   80|
      9|   81|- (void)addModels:(NSArray *)models toSection:(OBTableViewSection *)section {
      9|   82|	//NSLog(@"addModels:%@ toSection:%@", models, section);
      9|   83|	NSMutableArray *modelsForSection = [self modelsArrayForSection:section];
      9|   84|	[modelsForSection addObjectsFromArray:models];
      9|   85|}
       |   86|
       |   87|
     90|   88|- (NSMutableArray *)modelsArrayForSection:(OBTableViewSection *)section {
     90|   89|	//DDLogVerbose(@"model dictionary, %@", _modelDictionary);
     90|   90|	//DDLogVerbose(@"get model for section: %@", section);
     90|   91|	if (!section) {
      0|   92|		return nil;
      0|   93|	}
     90|   94|
     90|   95|	NSMutableArray *result = [_modelDictionary objectForKey:section];
     90|   96|	if (!result) {
     24|   97|		//NSLog(@"no models found so create array");
     24|   98|		result = [[NSMutableArray alloc] init];
     24|   99|		[_modelDictionary setObject:result forKey:section];
     24|  100|		//NSLog(@"model created and added: %@", _modelDictionary);
     24|  101|
     24|  102|	}
     90|  103|	//DDLogVerbose(@"models: %@ in section %@",result, section);
     90|  104|	return result;
     90|  105|}
       |  106|
     51|  107|- (NSArray *)modelsForSection:(OBTableViewSection *)section {
     51|  108|	return [NSArray arrayWithArray:[self modelsArrayForSection:section]];
     51|  109|}
       |  110|
      8|  111|- (NSArray *)modelsForSectionIndex:(NSInteger)sectionIndex {
      8|  112|	OBTableViewSection *section = [self sectionAtIndex:sectionIndex];
      8|  113|	return [self modelsForSection:section];
      8|  114|}
       |  115|
     12|  116|- (NSIndexPath *)indexPathForModel:(NSObject *)object {
     12|  117|	for (OBTableViewSection *section in _sections) {
     12|  118|		NSArray *models = [self modelsForSection:section];
     12|  119|		NSInteger index = [models indexOfObject:object];
     12|  120|		if (index != NSNotFound) {
     12|  121|			return [NSIndexPath indexPathForRow:index inSection:section.identifier-1];
     12|  122|		}
     12|  123|	}
      0|  124|	return nil;
     12|  125|}
       |  126|
      1|  127|- (void)insertModel:(NSObject *)model toSection:(OBTableViewSection *)section {
      1|  128|	//NSLog(@"insertModel:%@ toSection:%@", model, section);
      1|  129|
      1|  130|	NSInteger sectionIndex = [_sections indexOfObject:section];
      1|  131|	if (sectionIndex !=  NSNotFound) {
      1|  132|		NSIndexPath *insertIndexPath = [NSIndexPath indexPathForRow:0 inSection:sectionIndex];
      1|  133|		[self insertModel:model atIndexPath:insertIndexPath];
      1|  134|	}
      1|  135|
      1|  136|}
       |  137|
      1|  138|- (void)insertModels:(NSArray *)models toSection:(OBTableViewSection *)section {
      1|  139|	//NSLog(@"insertModels:%@ toSection:%@", models, section);
      1|  140|
      1|  141|	NSInteger sectionIndex = [_sections indexOfObject:section];
      1|  142|	if (sectionIndex !=  NSNotFound) {
      1|  143|		NSIndexPath *insertIndexPath = [NSIndexPath indexPathForRow:0 inSection:sectionIndex];
      1|  144|		[self insertModels:models atIndexPath:insertIndexPath];
      1|  145|
      1|  146|
      1|  147|	}
      1|  148|}
       |  149|
       |  150|
      1|  151|- (void)appendModel:(NSObject *)model toSection:(OBTableViewSection *)section {
      1|  152|	[self appendModels:@[model] toSection:section];
      1|  153|}
       |  154|
      2|  155|- (void)appendModels:(NSArray *)models toSection:(OBTableViewSection *)section {
      2|  156|	//NSLog(@"appendModels:%@ toSection:%@", models, section);
      2|  157|
      2|  158|	NSInteger sectionIndex = [_sections indexOfObject:section];
      2|  159|	if (sectionIndex !=  NSNotFound) {
      2|  160|		NSInteger modelCount = [[self modelsArrayForSection:section] count];
      2|  161|		NSIndexPath *insertIndexPath = [NSIndexPath indexPathForRow:modelCount inSection:sectionIndex];
      2|  162|		[self insertModels:models atIndexPath:insertIndexPath withRowAnimation:UITableViewRowAnimationAutomatic];
      2|  163|	}
      2|  164|
      2|  165|}
       |  166|
      0|  167|- (void)insertModel:(NSObject *)model after:(NSObject *)afterModel {
      0|  168|	//NSLog(@"insertModel:%@ after:%@", model, afterModel);
      0|  169|
      0|  170|	NSIndexPath *afterModelIndexPath = [self indexPathForModel:afterModel];
      0|  171|	NSIndexPath *insertIndexPath = [NSIndexPath indexPathForRow:afterModelIndexPath.row+1 inSection:afterModelIndexPath.section];
      0|  172|	[self insertModel:model atIndexPath:insertIndexPath];
      0|  173|}
       |  174|
       |  175|
      0|  176|- (void)insertModel:(NSObject *)model before:(NSObject *)before {
      0|  177|	//NSLog(@"insertModel:%@ before:%@", model, before);
      0|  178|
      0|  179|	NSIndexPath *beforeModelIndexPath = [self indexPathForModel:before];
      0|  180|	[self insertModel:model atIndexPath:beforeModelIndexPath];
      0|  181|}
       |  182|
      1|  183|- (void)insertModel:(NSObject *)model atIndexPath:(NSIndexPath *)indexPath {
      1|  184|	//NSLog(@"insertModel:%@ atIndexPath:%@", model, indexPath);
      1|  185|
      1|  186|	//[self dumpModels];
      1|  187|
      1|  188|	OBTableViewSection *section = [self sectionAtIndex:indexPath.section];
      1|  189|
      1|  190|	NSMutableArray *models = [self modelsArrayForSection:section];
      1|  191|	[models insertObject:model atIndex:indexPath.row];
      1|  192|
      1|  193|	[self.tableView beginUpdates];
      1|  194|	[self.tableView insertRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationFade];
      1|  195|	[self.tableView endUpdates];
      1|  196|}
       |  197|
      1|  198|- (void)insertModels:(NSArray *)modelsToInsert atIndexPath:(NSIndexPath *)indexPath  {
      1|  199|	[self insertModels:modelsToInsert atIndexPath:indexPath withRowAnimation:UITableViewRowAnimationFade];
      1|  200|}
       |  201|
      3|  202|- (void)insertModels:(NSArray *)modelsToInsert atIndexPath:(NSIndexPath *)indexPath withRowAnimation:(UITableViewRowAnimation)rowAnimation {
      3|  203|	//NSLog(@"insertModels:%@ atIndexPath:%@", modelsToInsert, indexPath);
      3|  204|
      3|  205|	OBTableViewSection *section = [self sectionAtIndex:indexPath.section];
      3|  206|
      3|  207|	NSMutableArray *models = [self modelsArrayForSection:section];
      3|  208|
      3|  209|	NSIndexSet *indexes = [NSIndexSet indexSetWithIndexesInRange:NSMakeRange(indexPath.row, [modelsToInsert count])];
      3|  210|
      3|  211|	[models insertObjects:modelsToInsert atIndexes:indexes];
      3|  212|
      3|  213|	NSMutableArray *indexPaths = [[NSMutableArray alloc] init];
      8|  214|	for (int i=0; i<[modelsToInsert count]; i++) {
      5|  215|		[indexPaths addObject:[NSIndexPath indexPathForRow:indexPath.row+i inSection:indexPath.section]];
      5|  216|	}
      3|  217|
      3|  218|	[self.tableView beginUpdates];
      3|  219|	[self.tableView insertRowsAtIndexPaths:indexPaths withRowAnimation:rowAnimation];
      3|  220|	[self.tableView endUpdates];
      3|  221|}
       |  222|
       |  223|
      0|  224|- (void)removeModel:(NSObject *)model {
      0|  225|	//NSLog(@"removeModel:%@", model);
      0|  226|
      0|  227|	if (!model) {
      0|  228|		return;
      0|  229|	}
      0|  230|	[self removeModels:@[model]];
      0|  231|}
       |  232|
      0|  233|- (void)removeModels:(NSArray *)modelsToRemove {
      0|  234|	//NSLog(@"removeModels:%@", modelsToRemove);
      0|  235|
      0|  236|	NSMutableArray *indexPaths = [[NSMutableArray alloc] init];
      0|  237|
      0|  238|	// first grab all indexPath for the models that must be removed
      0|  239|	for (NSObject *model in modelsToRemove) {
      0|  240|		NSIndexPath *indexPath = [self indexPathForModel:model];
      0|  241|		if (indexPath) {
      0|  242|			[indexPaths addObject:indexPath];
      0|  243|		}
      0|  244|	}
      0|  245|
      0|  246|	// remove the models
      0|  247|	for (NSObject *model in modelsToRemove) {
      0|  248|		NSIndexPath *indexPath = [self indexPathForModel:model];
      0|  249|		OBTableViewSection *section = [self sectionAtIndex:indexPath.section];
      0|  250|		NSMutableArray *models = [self modelsArrayForSection:section];
      0|  251|		[models removeObject:model];
      0|  252|	}
      0|  253|
      0|  254|	if ([indexPaths count]) {
      0|  255|		[self.tableView beginUpdates];
      0|  256|		[self.tableView deleteRowsAtIndexPaths:indexPaths withRowAnimation:UITableViewRowAnimationFade];
      0|  257|		[self.tableView endUpdates];
      0|  258|	}
      0|  259|}
       |  260|
       |  261|
      8|  262|- (void)setModels:(NSArray *)models toSection:(OBTableViewSection *)section {
      8|  263|
      8|  264|	NSInteger sectionIndex = [_sections indexOfObject:section];
      8|  265|	if (sectionIndex ==  NSNotFound) {
      0|  266|		return;
      0|  267|	}
      8|  268|
      8|  269|	NSMutableArray *modelsInSection = [self modelsArrayForSection:section];
      8|  270|
      8|  271|	if ([self isEmpty]) {
      1|  272|		// no models are present in the table view controller, so do not animated it the first time
      1|  273|		[self addModels:models toSection:section];
      1|  274|		[self.tableView reloadData];
      1|  275|		return;
      1|  276|	}
      8|  277|
      7|  278|	NSMutableArray  *modelsToDelete = [[NSMutableArray alloc] initWithArray:modelsInSection];
      7|  279|	[modelsToDelete removeObjectsInArray:models];
      7|  280|
      7|  281|	NSMutableArray *indexPathsToDelete = [[NSMutableArray alloc] init];
      4|  282|	for (NSObject *model in modelsToDelete) {
      4|  283|		NSInteger index = [modelsInSection indexOfObject:model];
      4|  284|		[indexPathsToDelete addObject:[NSIndexPath indexPathForRow:index inSection:sectionIndex]];
      4|  285|	}
      7|  286|
      7|  287|
      7|  288|	NSMutableArray *modelsToInsert = [[NSMutableArray alloc] initWithArray:models];
      7|  289|	[modelsToInsert removeObjectsInArray:modelsInSection];
      7|  290|	NSMutableArray *indexPathsToInsert = [[NSMutableArray alloc] init];
      7|  291|
      7|  292|
      9|  293|	for (NSObject *model in modelsToInsert) {
      9|  294|		NSInteger index = [models indexOfObject:model];
      9|  295|		[indexPathsToInsert addObject:[NSIndexPath indexPathForRow:index inSection:sectionIndex]];
      9|  296|	}
      7|  297|
      7|  298|
      7|  299|	[modelsInSection setArray:models];
      7|  300|
      7|  301|	if ([indexPathsToInsert count] || [indexPathsToDelete count]) {
      7|  302|		[self.tableView beginUpdates];
      7|  303|	}
      7|  304|	if ([indexPathsToDelete count]) {
      3|  305|		[self.tableView deleteRowsAtIndexPaths:indexPathsToDelete withRowAnimation:UITableViewRowAnimationBottom];
      3|  306|	}
      7|  307|	if ([indexPathsToInsert count]) {
      5|  308|		[self.tableView insertRowsAtIndexPaths:indexPathsToInsert withRowAnimation:UITableViewRowAnimationTop];
      5|  309|	}
      7|  310|	if ([indexPathsToInsert count] || [indexPathsToDelete count]) {
      7|  311|		[self.tableView endUpdates];
      7|  312|	}
      7|  313|}
       |  314|
      8|  315|- (BOOL)isEmpty {
      8|  316|	if ([_modelDictionary count] == 0) {
      0|  317|		return YES;
      0|  318|	}
      8|  319|	for (OBTableViewSection *section in [_modelDictionary allKeys]) {
      8|  320|		NSArray *models = [_modelDictionary objectForKey:section];
      8|  321|		if ([models count] != 0) {
      7|  322|			return NO;
      7|  323|		}
      8|  324|	}
      1|  325|	return YES;
      8|  326|}
       |  327|
       |  328|
      0|  329|- (void)reloadCellForModel:(NSObject *)model {
      0|  330|	//NSLog(@"reloadCellForModel:%@", model);
      0|  331|
      0|  332|	NSIndexPath *indexPath = [self indexPathForModel:model];
      0|  333|	if (indexPath) {
      0|  334|		[self.tableView beginUpdates];
      0|  335|		[self.tableView reloadRowsAtIndexPaths:@[indexPath] withRowAnimation:UITableViewRowAnimationAutomatic];
      0|  336|		[self.tableView endUpdates];
      0|  337|	}
      0|  338|}
       |  339|
      0|  340|- (void)reloadTableView {
      0|  341|	//NSLog(@"reloadTableView");
      0|  342|
      0|  343|	[self.tableView reloadData];
      0|  344|}
       |  345|
     38|  346|- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {
     38|  347|	OBTableViewSection *tableViewSection = [self sectionAtIndex:section];
     38|  348|	if (tableViewSection.headerTitle) {
     33|  349|		return UITableViewAutomaticDimension;
     33|  350|	}
     38|  351|
      5|  352|	return 0;
     38|  353|}
       |  354|
     21|  355|- (NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section {
     21|  356|	OBTableViewSection *tableViewSection = [self sectionAtIndex:section];
     21|  357|	if (tableViewSection) {
     21|  358|		return tableViewSection.headerTitle;
     21|  359|	}
      0|  360|	return nil;
     21|  361|}
       |  362|
       |  363|
      0|  364|- (void)deleteAllModelsFromSection:(OBTableViewSection *)section {
      0|  365|	//NSLog(@"deleteAllModelsFromSection:%@", section);
      0|  366|
      0|  367|	NSMutableArray *models = [self modelsArrayForSection:section];
      0|  368|	[models removeAllObjects];
      0|  369|}
       |  370|
      1|  371|- (void)removeAllModelsFromSection:(OBTableViewSection *)section {
      1|  372|	//NSLog(@"removeAllModelsFromSection:%@", section);
      1|  373|	NSMutableArray *modelsToRemove = [self modelsArrayForSection:section];
      1|  374|
      1|  375|
      1|  376|	NSMutableArray *indexPaths = [[NSMutableArray alloc] init];
      1|  377|
      1|  378|	// first grab all indexPath for the models that must be removed
      3|  379|	for (NSObject *model in modelsToRemove) {
      3|  380|		NSIndexPath *indexPath = [self indexPathForModel:model];
      3|  381|		if (indexPath) {
      3|  382|			[indexPaths addObject:indexPath];
      3|  383|		}
      3|  384|	}
      1|  385|
      1|  386|	[modelsToRemove removeAllObjects];
      1|  387|
      1|  388|	if ([indexPaths count]) {
      1|  389|		[self.tableView beginUpdates];
      1|  390|		[self.tableView deleteRowsAtIndexPaths:indexPaths withRowAnimation:UITableViewRowAnimationFade];
      1|  391|		[self.tableView endUpdates];
      1|  392|	}
      1|  393|}
       |  394|
      4|  395|- (void)setEditing:(BOOL)editing animated:(BOOL)animated {
      4|  396|	//NSLog(@"setEditing:%@", [@(editing) stringValue]);
      4|  397|
      4|  398|	BOOL setEditing = NO;
      4|  399|	if (editing) {
      4|  400|		for (OBTableViewSection *section in _sections) {
      4|  401|			if (section.editable) {
      2|  402|				NSArray *model = [self modelsForSection:section];
      2|  403|				if ([model count]) {
      2|  404|					setEditing = YES;
      2|  405|					break;
      2|  406|				}
      2|  407|			}
      4|  408|		}
      4|  409|	}
      4|  410|	[self.tableView setEditing:setEditing animated:animated];
      4|  411|}
       |  412|
       |  413|
      4|  414|- (void)setEditing:(BOOL)editable {
      4|  415|	[self setEditing:editable animated:YES];
      4|  416|}
       |  417|
      4|  418|- (BOOL)editing {
      4|  419|	return self.tableView.editing;
      4|  420|}
       |  421|
       |  422|
      2|  423|- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath {
      2|  424|	OBTableViewSection *section = [_sections objectAtIndex:indexPath.section];
      2|  425|	if (!section.editable) {
      1|  426|		return NO;
      1|  427|	}
      1|  428|	return YES;
      2|  429|}
       |  430|
       |  431|
      0|  432|- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath {
      0|  433|	if (editingStyle == UITableViewCellEditingStyleDelete) {
      0|  434|		NSObject *model = [self modelAtIndexPath:indexPath];
      0|  435|		[self removeModel:model];
      0|  436|
      0|  437|		if (self.delegate && [self.delegate respondsToSelector:@selector(tableViewController:didDeleteModel:)]) {
      0|  438|
      0|  439|			[self.delegate tableViewController:self didDeleteModel:model];
      0|  440|
      0|  441|		}
      0|  442|	}
      0|  443|}
       |  444|
      0|  445|- (void)dumpModels {
      0|  446|/*
      0|  447|	NSLog(@"OBTableViewController models:");
      0|  448|	for (OBTableViewSection *section in self.sections) {
      0|  449|		NSLog(@"\t%@", section);
      0|  450|
      0|  451|		for (NSObject *model in [self modelsForSection:section]) {
      0|  452|			NSLog(@"\t\t%@", model);
      0|  453|		}
      0|  454|
      0|  455|	}
      0|  456|*/
      0|  457|}
       |  458|@end

/Users/rene/workspace/openbakery/OBTableViewController/Core/Source/OBTableViewSection.m:
       |    1|//
       |    2|//
       |    3|// Created by Rene Pirringer.
       |    4|//
       |    5|// 
       |    6|//
       |    7|
       |    8|
       |    9|#import "OBTableViewSection.h"
       |   10|
       |   11|@interface OBTableViewSection()
       |   12|@property (nonatomic, assign) NSInteger identifier;
       |   13|@end;
       |   14|
       |   15|
       |   16|@implementation OBTableViewSection {
       |   17|
       |   18|}
       |   19|
       |   20|
     32|   21|- (id)init {
     32|   22|	self = [super init];
     32|   23|	if (self) {
     32|   24|		self.editable = YES;
     32|   25|	}
     32|   26|	return self;
     32|   27|}
       |   28|
       |   29|
      4|   30|- (id)initWithHeaderTitle:(NSString *)title {
      4|   31|	self = [self init];
      4|   32|	if (self) {
      4|   33|		self.headerTitle = title;
      4|   34|	}
      4|   35|	return self;
      4|   36|}
       |   37|
       |   38|
     24|   39|- (id)copyWithZone:(NSZone *)zone {
     24|   40|	OBTableViewSection *copy = [[self class] allocWithZone:zone];
     24|   41|	if (copy) {
     24|   42|		copy.identifier = self.identifier;
     24|   43|	}
     24|   44|	return copy;
     24|   45|
     24|   46|}
       |   47|
     95|   48|- (BOOL)isEqual:(id)other {
     95|   49|	if (other == self) {
      0|   50|			return YES;
      0|   51|	}
     95|   52|	if (!other || ![[other class] isEqual:[self class]]) {
      0|   53|			return NO;
      0|   54|	}
     95|   55|
     95|   56|	return [self isEqualToSection:other];
     95|   57|}
       |   58|
     95|   59|- (BOOL)isEqualToSection:(OBTableViewSection *)section {
     95|   60|	if (self == section) {
      0|   61|			return YES;
      0|   62|	}
     95|   63|	if (section == nil) {
      0|   64|			return NO;
      0|   65|	}
     95|   66|	if (self.identifier != section.identifier) {
     29|   67|			return NO;
     29|   68|	}
     66|   69|	return YES;
     95|   70|}
       |   71|
    126|   72|- (NSUInteger)hash {
    126|   73|	return (NSUInteger) self.identifier;
    126|   74|}
       |   75|
       |   76|
      0|   77|- (NSString *)description {
      0|   78|	NSMutableString *description = [NSMutableString stringWithFormat:@"<%@: ", NSStringFromClass([self class])];
      0|   79|	[description appendString:@"id="];
      0|   80|	[description appendFormat:@"%d", (int)self.identifier];
      0|   81|	if (self.headerTitle) {
      0|   82|		[description appendString:@" headerTitle="];
      0|   83|		[description appendFormat:@"%@", self.headerTitle];
      0|   84|
      0|   85|	}
      0|   86|	[description appendString:@">"];
      0|   87|	return description;
      0|   88|}
       |   89|
       |   90|
       |   91|@end

/Users/rene/workspace/openbakery/OBTableViewController/Demo/Source/OBAppDelegate.m:
       |    1|//
       |    2|//  OBAppDelegate.m
       |    3|//  OBTableViewController
       |    4|//
       |    5|//  Created by Rene Pirringer on 24.04.14.
       |    6|//  Copyright (c) 2014 Rene Pirringer. All rights reserved.
       |    7|//
       |    8|
       |    9|
       |   10|
       |   11|#import "OBAppDelegate.h"
       |   12|
       |   13|
       |   14|@implementation OBAppDelegate
       |   15|
       |   16|- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
      1|   17|{
      1|   18|	return YES;
      1|   19|}
       |   20|
       |   21|- (void)applicationWillResignActive:(UIApplication *)application
      0|   22|{
      0|   23|	// Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
      0|   24|	// Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
      0|   25|}
       |   26|
       |   27|- (void)applicationDidEnterBackground:(UIApplication *)application
      0|   28|{
      0|   29|	// Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.
      0|   30|	// If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
      0|   31|}
       |   32|
       |   33|- (void)applicationWillEnterForeground:(UIApplication *)application
      0|   34|{
      0|   35|	// Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
      0|   36|}
       |   37|
       |   38|- (void)applicationDidBecomeActive:(UIApplication *)application
      1|   39|{
      1|   40|	// Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
      1|   41|}
       |   42|
       |   43|- (void)applicationWillTerminate:(UIApplication *)application
      0|   44|{
      0|   45|}
       |   46|
       |   47|@end

/Users/rene/workspace/openbakery/OBTableViewController/Demo/Source/OBDemoViewController.m:
       |    1|//
       |    2|//
       |    3|// Created by Rene Pirringer.
       |    4|//
       |    5|// 
       |    6|//
       |    7|
       |    8|
       |    9|#import "OBDemoViewController.h"
       |   10|#import "UITableViewCellModel.h"
       |   11|#import "OBTableViewController.h"
       |   12|#import "OBTableViewSection.h"
       |   13|#import "OBInsertViewController.h"
       |   14|
       |   15|
       |   16|@implementation OBDemoViewController {
       |   17|	NSMutableArray* _colorModels;
       |   18|}
       |   19|
       |   20|
       |   21|
      1|   22|- (void)viewDidLoad {
      1|   23|	[super viewDidLoad];
      1|   24|	self.tableViewController = [[OBTableViewController alloc] init];
      1|   25|	self.tableViewController.tableView = self.tableView;
      1|   26|	self.tableViewController.selectionMode = OBTableViewControllerSelectionSingleCheck;
      1|   27|
      1|   28|	[self.tableViewController registerIdentifier:@"TableViewCell" modelClass:[UITableViewCellModel class]];
      1|   29|	
      1|   30|	[self.tableViewController addSection:[[OBTableViewSection alloc] initWithHeaderTitle:@"First"]];
      1|   31|	[self.tableViewController addSection:[[OBTableViewSection alloc] initWithHeaderTitle:@"Second"]];
      1|   32|	[self.tableViewController addSection:[[OBTableViewSection alloc] initWithHeaderTitle:@"Third"]];
      1|   33|	[self.tableViewController addSection:[[OBTableViewSection alloc] initWithHeaderTitle:@"Forth"]];
      1|   34|
      1|   35|	NSArray *colors = @[ @"White", @"Silver", @"Gray", @"Black", @"Red", @"Maroon", @"Yellow", @"Olive", @"Lime", @"Green", @"Aqua", @"Teal", @"Blue", @"Navy", @"Fuchsia", @"Purple" ];
      1|   36|
      1|   37|	_colorModels = [[NSMutableArray alloc] init];
     16|   38|	for (NSString *color in colors) {
     16|   39|		UITableViewCellModel *model = [[UITableViewCellModel alloc] init];
     16|   40|		model.text = color;
     16|   41|
     16|   42|		[_colorModels addObject:model];
     16|   43|	}
      1|   44|
      1|   45|}
       |   46|
       |   47|
      0|   48|- (IBAction)addItem:(NSString *)name toSection:(OBTableViewSection *)section{
      0|   49|	UITableViewCellModel *model = [[UITableViewCellModel alloc] init];
      0|   50|	model.text = name;
      0|   51|	[self.tableViewController insertModel:model toSection:section];
      0|   52|}
       |   53|
       |   54|
      0|   55|- (IBAction)addRandom:(id)sender{
      0|   56|	NSMutableArray *models = [[NSMutableArray alloc] init];
      0|   57|	for (UITableViewCellModel *model in _colorModels) {
      0|   58|		if (arc4random() % 2) {
      0|   59|			[models addObject:model];
      0|   60|		}
      0|   61|	}
      0|   62|	OBTableViewSection *firstSection = [self.tableViewController.sections firstObject];
      0|   63|	[self.tableViewController setModels:models toSection:firstSection];
      0|   64|}
       |   65|
      0|   66|- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
      0|   67|	if ([segue.identifier isEqualToString:@"InsertItem"]) {
      0|   68|		OBInsertViewController *insertViewController = segue.destinationViewController;
      0|   69|		insertViewController.sections = [self.tableViewController sections];
      0|   70|		__weak OBDemoViewController *weakSelf = self;
      0|   71|		insertViewController.completion = ^(NSString *name, OBTableViewSection *section) {
      0|   72|		    [weakSelf addItem:name toSection:section];
      0|   73|		    [weakSelf.navigationController popViewControllerAnimated:YES];
      0|   74|		};
      0|   75|	}
      0|   76|}
       |   77|
       |   78|
       |   79|@end

/Users/rene/workspace/openbakery/OBTableViewController/Demo/Source/OBInsertViewController.m:
       |    1|//
       |    2|//  OBInsertViewController.m
       |    3|//  OBTableViewController
       |    4|//
       |    5|//  Created by Rene Pirringer on 28.07.14.
       |    6|//  Copyright (c) 2014 Rene Pirringer. All rights reserved.
       |    7|//
       |    8|
       |    9|#import "OBInsertViewController.h"
       |   10|#import "OBTableViewSection.h"
       |   11|
       |   12|@interface OBInsertViewController ()
       |   13|
       |   14|@end
       |   15|
       |   16|@implementation OBInsertViewController
       |   17|
      0|   18|- (void)viewDidLoad {
      0|   19|	[super viewDidLoad];
      0|   20|	self.sectionPicker.dataSource = self;
      0|   21|	self.sectionPicker.delegate = self;
      0|   22|
      0|   23|	[self updateView];
      0|   24|}
       |   25|
      0|   26|- (void)updateView {
      0|   27|	self.insertButton.enabled = [self.nameTextField.text length] > 0;
      0|   28|}
       |   29|
      0|   30|- (IBAction)insertButtonPressed:(id)sender {
      0|   31|
      0|   32|	if (self.completion) {
      0|   33|		NSInteger row = [self.sectionPicker selectedRowInComponent:0];
      0|   34|		self.completion(self.nameTextField.text, [self.sections objectAtIndex:row]);
      0|   35|	}
      0|   36|
      0|   37|}
       |   38|
      0|   39|- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView {
      0|   40|	return 1;
      0|   41|}
       |   42|
      0|   43|- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component {
      0|   44|	return [self.sections count];
      0|   45|}
       |   46|
      0|   47|- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component {
      0|   48|	OBTableViewSection *section = [self.sections objectAtIndex:row];
      0|   49|	return section.headerTitle;
      0|   50|}
       |   51|
      0|   52|- (IBAction)nameChanged:(id)sender {
      0|   53|	[self updateView];
      0|   54|}
       |   55|
       |   56|@end

/Users/rene/workspace/openbakery/OBTableViewController/Demo/Source/main.m:
       |    1|//
       |    2|//  main.m
       |    3|//  OBTableViewController
       |    4|//
       |    5|//  Created by Rene Pirringer on 24.04.14.
       |    6|//  Copyright (c) 2014 Rene Pirringer. All rights reserved.
       |    7|//
       |    8|
       |    9|#import <UIKit/UIKit.h>
       |   10|
       |   11|#import "OBAppDelegate.h"
       |   12|
       |   13|
       |   14|
       |   15|int main(int argc, char * argv[])
      1|   16|{
      1|   17|	@autoreleasepool {
      1|   18|	    return UIApplicationMain(argc, argv, nil, NSStringFromClass([OBAppDelegate class]));
      1|   19|	}
      1|   20|}

/Users/rene/workspace/openbakery/OBTableViewController/Pods/OBInjector/Core/Source/OBInjectorController.m:
       |    1|//
       |    2|//
       |    3|// Author: René Pirringer
       |    4|//
       |    5|//
       |    6|
       |    7|#import "OBInjectorController.h"
       |    8|#import "OBPropertyInjector.h"
       |    9|
       |   10|
       |   11|@implementation OBInjectorController {
       |   12|	OBPropertyInjector *_injector;
       |   13|}
       |   14|
       |   15|
      6|   16|+ (OBInjectorController *)sharedController {
      6|   17|	static OBInjectorController *sharedController = nil;
      6|   18|	static dispatch_once_t onceToken;
      6|   19|	dispatch_once(&onceToken, ^{
      1|   20|			sharedController = [[OBInjectorController alloc] init];
      1|   21|	});
      6|   22|	return sharedController;
      6|   23|}
       |   24|
      6|   25|+ (void)injectDependenciesTo:(NSObject *)injectTo {
      6|   26|	[[OBInjectorController sharedController].injector injectDependenciesTo:injectTo];
      6|   27|}
       |   28|
       |   29|
      1|   30|- (instancetype)init {
      1|   31|	self = [super init];
      1|   32|	if (self) {
      1|   33|	}
      1|   34|	return self;
      1|   35|}
       |   36|
       |   37|
      0|   38|+ (void)configureInjector:(OBInjectorConfigureInjectorBlock)block {
      0|   39|	[[OBInjectorController sharedController] configureInjector:block];
      0|   40|}
       |   41|
       |   42|
      0|   43|- (void)configureInjector:(OBInjectorConfigureInjectorBlock)block {
      0|   44|	if (!_injector) {
      0|   45|		if (block) {
      0|   46|			_injector = [[OBPropertyInjector alloc] init];
      0|   47|			block(_injector);
      0|   48|		}
      0|   49|	}
      0|   50|}
       |   51|
      6|   52|- (OBPropertyInjector *)injector {
      6|   53|	return _injector;
      6|   54|}
       |   55|
       |   56|
       |   57|
       |   58|@end

/Users/rene/workspace/openbakery/OBTableViewController/Pods/OBInjector/Core/Source/OBPropertyInjector.m:
       |    1|//
       |    2|//
       |    3|// Author: René Pirringer
       |    4|//
       |    5|//
       |    6|
       |    7|
       |    8|
       |    9|#import <objc/runtime.h>
       |   10|#import "OBPropertyInjector.h"
       |   11|
       |   12|@interface OBRegisteredProperty : NSObject
       |   13|
       |   14|
       |   15|@property (nonatomic, readonly) NSString *name;
       |   16|@property (nonatomic, readonly) Class instanceClass;
       |   17|
       |   18|- (instancetype)initWithName:(NSString *)name block:(OBInjectorCreateInstanceBlock)block;
       |   19|- (instancetype)initWithName:(NSString *)name object:(NSObject *)object;
       |   20|
       |   21|- (NSObject *)instance;
       |   22|
       |   23|
       |   24|@end
       |   25|
       |   26|@implementation OBRegisteredProperty {
       |   27|	NSString *_name;
       |   28|	OBInjectorCreateInstanceBlock _block;
       |   29|	NSObject *_instance;
       |   30|	Class _instanceClass;
       |   31|	
       |   32|}
       |   33|
      0|   34|- (instancetype)initWithName:(NSString *)name block:(OBInjectorCreateInstanceBlock)block {
      0|   35|	self = [super init];
      0|   36|	if (self) {
      0|   37|		_name = name;
      0|   38|		_block = [block copy];
      0|   39|		_instanceClass = [block() class];
      0|   40|	}
      0|   41|	return self;
      0|   42|}
       |   43|
      0|   44|- (instancetype)initWithName:(NSString *)name object:(NSObject *)object {
      0|   45|	self = [super init];
      0|   46|	if (self) {
      0|   47|		_name = name;
      0|   48|		_instance = object;
      0|   49|		_instanceClass = [object class];
      0|   50|	}
      0|   51|	return self;
      0|   52|}
       |   53|
      0|   54|- (NSString *)name {
      0|   55|	return _name;
      0|   56|}
       |   57|
      0|   58|- (Class)instanceClass {
      0|   59|	return _instanceClass;
      0|   60|}
       |   61|
      0|   62|- (NSObject *)instance {
      0|   63|	if (_block) {
      0|   64|		return _block();
      0|   65|	}
      0|   66|	return _instance;
      0|   67|}
       |   68|
       |   69|
       |   70|@end
       |   71|
       |   72|
       |   73|@implementation OBPropertyInjector
       |   74|{
       |   75|	NSMutableArray *_registeredProperties;
       |   76|}
       |   77|
       |   78|
      0|   79|- (id)init {
      0|   80|	self = [super init];
      0|   81|	if (self) {
      0|   82|		_registeredProperties = [[NSMutableArray alloc] init];
      0|   83|	}
      0|   84|	return self;
      0|   85|}
       |   86|
       |   87|
      0|   88|- (BOOL)injectPropertyTo:(NSObject *)injectTo registredProperty:(OBRegisteredProperty *)registeredProperty {
      0|   89|
      0|   90|	objc_property_t propertyClass = class_getProperty([injectTo class], [registeredProperty.name UTF8String]);
      0|   91|	if (propertyClass != NULL)
      0|   92|	{
      0|   93|		const char *type = property_getAttributes(propertyClass);
      0|   94|		NSString *typeString = [NSString stringWithUTF8String:type];
      0|   95|		NSArray *attributes = [typeString componentsSeparatedByString:@","];
      0|   96|		NSString *typeAttribute = [attributes objectAtIndex:0];
      0|   97|		
      0|   98|		if ([typeAttribute hasPrefix:@"T@\"<"]) {
      0|   99|			// is protocol
      0|  100|			NSString *type = [typeAttribute substringWithRange:NSMakeRange(4, [typeAttribute length] - 6)];
      0|  101|			Protocol *p = NSProtocolFromString(type);
      0|  102|			if ([registeredProperty.instanceClass conformsToProtocol:p]) {
      0|  103|				return [self setProperty:registeredProperty to:injectTo];
      0|  104|			}
      0|  105|		} else if ([typeAttribute hasPrefix:@"T@\""]) {
      0|  106|			NSString *type = [typeAttribute substringWithRange:NSMakeRange(3, [typeAttribute length] - 4)];
      0|  107|			Class objectClass = NSClassFromString(type);
      0|  108|			if ([registeredProperty.instanceClass isSubclassOfClass:objectClass]) {
      0|  109|				return [self setProperty:registeredProperty to:injectTo];
      0|  110|			}
      0|  111|		}
      0|  112|	}
      0|  113|	return NO;
      0|  114|}
       |  115|
      0|  116|- (BOOL)setProperty:(OBRegisteredProperty *)property to:(NSObject *)injectTo {
      0|  117|	if ([injectTo valueForKey:property.name] == nil) {
      0|  118|		[injectTo setValue:property.instance forKey:property.name];
      0|  119|		return YES;
      0|  120|	}
      0|  121|	return NO;
      0|  122|}
       |  123|
       |  124|- (void)injectDependenciesTo:(NSObject *)injectTo
      0|  125|{
      0|  126|	BOOL didInjectDependencies = NO;
      0|  127|	for (OBRegisteredProperty *registeredProperty in _registeredProperties) {
      0|  128|		if ([self injectPropertyTo:injectTo registredProperty:registeredProperty]) {
      0|  129|			didInjectDependencies = YES;
      0|  130|		}
      0|  131|	}
      0|  132|
      0|  133|	if (!didInjectDependencies) {
      0|  134|		return;
      0|  135|	}
      0|  136|
      0|  137|	// only call the delegate is a value was injected
      0|  138|	if ([injectTo conformsToProtocol:@protocol(OBInjectorDelegate)]) {
      0|  139|		NSObject <OBInjectorDelegate> *delegate = (NSObject <OBInjectorDelegate> *) injectTo;
      0|  140|		if ([delegate respondsToSelector:@selector(didInjectDependencies)]) {
      0|  141|			[delegate didInjectDependencies];
      0|  142|		}
      0|  143|	}
      0|  144|}
       |  145|
       |  146|
       |  147|- (void)registerProperty:(NSString *)property withInstance:(id <NSObject>)instance
      0|  148|{
      0|  149|	OBRegisteredProperty *registredProperty = [[OBRegisteredProperty alloc] initWithName:property object:instance];
      0|  150|	[_registeredProperties addObject:registredProperty];
      0|  151|}
       |  152|
       |  153|
      0|  154|- (void)registerProperty:(NSString *)property withBlock:(OBInjectorCreateInstanceBlock)block {
      0|  155|	NSAssert(block, @"Given block is nil");
      0|  156|	OBRegisteredProperty *registredProperty = [[OBRegisteredProperty alloc] initWithName:property block:block];
      0|  157|	[_registeredProperties addObject:registredProperty];
      0|  158|	
      0|  159|}
       |  160|
      0|  161|- (id)instanceForClass:(Class)clazz {
      0|  162|	for (OBRegisteredProperty *registeredProperty  in _registeredProperties) {
      0|  163|		if ([registeredProperty.instanceClass isSubclassOfClass:clazz]) {
      0|  164|			return registeredProperty.instance;
      0|  165|		}
      0|  166|	}
      0|  167|	return nil;
      0|  168|}
       |  169|
      0|  170|- (id)instanceForProperty:(NSString *)property {
      0|  171|	return [_registeredProperties valueForKey:property];
      0|  172|}
       |  173|
       |  174|
       |  175|@end

